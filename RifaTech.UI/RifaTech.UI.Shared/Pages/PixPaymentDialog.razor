@using MudBlazor
@using RifaTech.DTOs.DTOs
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager Navigation

<MudDialog DisableSidePadding="true" ClassContent="px-0">
    <DialogContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Pagamento via PIX</MudText>
            
            <MudGrid>
              <MudItem xs="12" Class="d-flex justify-center">
                   @if (string.IsNullOrEmpty(Payment.QrCodeBase64))
                   {
                       <MudProgressCircular Indeterminate="true" />
                   }
                   else
                   {
                       <MudImage Src="@($"data:image/png;base64,{Payment.QrCodeBase64}")"
                                Width="200" Height="200" 
                                Class="mud-elevation-3" />
                   }
               </MudItem>
               
               <MudItem xs="12" Class="mt-4">
                   <MudTextField @bind-Value="Payment.QrCode"
                               Label="Código PIX Copia e Cola"
                               ReadOnly="true"
                               Variant="Variant.Outlined"
                               Adornment="Adornment.End"
                               AdornmentIcon="@Icons.Material.Filled.ContentCopy"
                               OnAdornmentClick="CopyPixCode" />
               </MudItem>
               
               <MudItem xs="12" Class="mt-2">
                   <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
                       Este QR Code é válido por 15 minutos. Após o pagamento, seus tickets serão gerados automaticamente.
                   </MudAlert>
               </MudItem>
               
               <MudItem xs="12" Class="mt-4">
                   <MudExpansionPanels>
                       <MudExpansionPanel Text="Detalhes da Compra">
                           <MudList>
                               <MudListItem>
                                   <MudText><b>Valor:</b> @Amount.ToString("C")</MudText>
                               </MudListItem>
                               <MudListItem>
                                   <MudText><b>ID do Pagamento:</b> @Payment.Id</MudText>
                               </MudListItem>
                               <MudListItem>
                                   <MudText><b>Válido até:</b> @Payment.ExpirationTime.ToString("dd/MM/yyyy HH:mm")</MudText>
                               </MudListItem>
                           </MudList>
                       </MudExpansionPanel>
                   </MudExpansionPanels>
               </MudItem>
               
               <MudItem xs="12" Class="d-flex justify-center mt-4">
                   <MudButton OnClick="CheckPaymentStatus" 
                            Variant="Variant.Filled" 
                            Color="Color.Primary" 
                            StartIcon="@Icons.Material.Filled.Refresh"
                            Disabled="_checkingStatus">
                       @if (_checkingStatus)
                       {
                           <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                           <MudText Class="ms-2">Verificando...</MudText>
                       }
                       else
                       {
                           <MudText>Verificar Pagamento</MudText>
                       }
                   </MudButton>
               </MudItem>
           </MudGrid>
       </MudContainer>
   </DialogContent>
   <DialogActions>
       <MudButton OnClick="Close">Fechar</MudButton>
   </DialogActions>
</MudDialog>

@code {
   [CascadingParameter] MudDialogInstance MudDialog { get; set; }
   
   [Parameter] public PaymentDTO Payment { get; set; }
   [Parameter] public Guid RifaId { get; set; }
   [Parameter] public decimal Amount { get; set; }
   
   private bool _checkingStatus = false;
   private System.Threading.Timer _timer;
   
   protected override void OnInitialized()
   {
       // Iniciar verificação automática a cada 10 segundos
       _timer = new System.Threading.Timer(
           async _ => await CheckPaymentStatusAuto(), 
           null, 
           TimeSpan.FromSeconds(10), 
           TimeSpan.FromSeconds(10));
   }
   
   private async Task CopyPixCode()
   {
       await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Payment.QrCode);
       Snackbar.Add("Código PIX copiado!", Severity.Success);
   }
   
   private async Task CheckPaymentStatus()
   {
       _checkingStatus = true;
       
       try
       {
           var status = await Http.GetFromJsonAsync<PaymentDTO>($"api/payments/status/{Payment.Id}");
           
           if (status.Status == 1) // Confirmado (usar o enum correto)
           {
               Snackbar.Add("Pagamento confirmado! Seus tickets foram gerados.", Severity.Success);
               MudDialog.Close();
               Navigation.NavigateTo($"/tickets/compra-sucesso/{RifaId}");
           }
           else if (status.Status == 2) // Expirado
           {
               Snackbar.Add("Este pagamento expirou. Por favor, gere um novo.", Severity.Warning);
               MudDialog.Close();
           }
           else
           {
               Snackbar.Add("Pagamento ainda não confirmado. Tente novamente em alguns instantes.", Severity.Info);
           }
       }
       catch (Exception ex)
       {
           Snackbar.Add($"Erro ao verificar status: {ex.Message}", Severity.Error);
       }
       finally
       {
           _checkingStatus = false;
       }
   }
   
   private async Task CheckPaymentStatusAuto()
   {
       if (_checkingStatus) return;
       
       try
       {
           var status = await Http.GetFromJsonAsync<PaymentDTO>($"api/payments/status/{Payment.Id}");
           
           if (status.Status == 1) // Confirmado (usar o enum correto)
           {
               await InvokeAsync(() => {
                   Snackbar.Add("Pagamento confirmado! Seus tickets foram gerados.", Severity.Success);
                   MudDialog.Close();
                   Navigation.NavigateTo($"/tickets/compra-sucesso/{RifaId}");
               });
           }
           else if (status.Status == 2) // Expirado
           {
               await InvokeAsync(() => {
                   Snackbar.Add("Este pagamento expirou. Por favor, gere um novo.", Severity.Warning);
                   MudDialog.Close();
               });
           }
       }
       catch (Exception)
       {
           // Silenciar erros nas verificações automáticas
       }
   }
   
   public void Dispose()
   {
       _timer?.Dispose();
   }
   
   private void Close() => MudDialog.Close();
}
