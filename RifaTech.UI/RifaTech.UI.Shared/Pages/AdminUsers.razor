@page "/admin/usuarios"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using RifaTech.DTOs.DTOs
@using MudBlazor
@using RifaTech.UI.Shared.Config
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject ILogger<AdminUsers> Logger
@inject IDialogService DialogService
@implements IDisposable

<PageTitle>Gerenciamento de Usuários - RifaTech</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-2" />
        Gerenciamento de Usuários
    </MudText>

    <!-- Filtros e Busca -->
    <MudPaper Elevation="3" Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField T="string"
                              @bind-Value="_searchTerm"
                              Label="Buscar usuário"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              OnAdornmentClick="ApplyFilters"
                              OnKeyUp="@(e => { if (e.Key == "Enter") ApplyFilters(); })" />
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string" Label="Filtrar por Papel" Variant="Variant.Outlined" @bind-Value="_selectedRole">
                    <MudSelectItem Value="@string.Empty">Todos</MudSelectItem>
                    <MudSelectItem Value="Admin">Administradores</MudSelectItem>
                    <MudSelectItem Value="User">Usuários</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="string" Label="Status" Variant="Variant.Outlined" @bind-Value="_statusFilter">
                    <MudSelectItem Value="all">Todos</MudSelectItem>
                    <MudSelectItem Value="active">Ativos</MudSelectItem>
                    <MudSelectItem Value="inactive">Inativos</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12" sm="6" md="2" Class="d-flex align-center">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="ApplyFilters"
                           StartIcon="@Icons.Material.Filled.FilterList"
                           Size="Size.Medium"
                           FullWidth="true">
                    Filtrar
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Botão para adicionar usuário -->
    <div class="d-flex justify-end mb-4">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="() => OpenUserDialog(null)">
            Adicionar Usuário
        </MudButton>
    </div>

    <!-- Tabela de Usuários -->
    @if (_loading)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (_users == null || !_users.Any())
    {
        <MudAlert Severity="Severity.Info" Class="my-4">Nenhum usuário encontrado com os filtros atuais.</MudAlert>
    }
    else
    {
        <MudPaper Elevation="3" Class="pa-4">
            <MudTable Items="@_users" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
                      LoadingProgressColor="Color.Primary" T="UserDTO" Class="mt-4">
                <HeaderContent>
                    <MudTh>Nome</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Papel</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Data de Registro</MudTh>
                    <MudTh Style="text-align:right">Ações</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nome">
                        <div class="d-flex align-center">
                            <MudAvatar Color="@(context.EhAdmin? Color.Error: Color.Primary)"
                                       Size="Size.Small" Class="mr-2">
                                @GetUserInitials(context.Name)
                            </MudAvatar>
                            <span>@context.Name</span>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Papel">
                        <MudChip Color="@(context.EhAdmin ? Color.Error : Color.Primary)"
                                 Size="Size.Small" T="string">
                            @(context.EhAdmin ? "Admin" : "Usuário")
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Status">
                        <MudChip Color="@(context.Ativo ? Color.Success : Color.Error)"
                                 Size="Size.Small" T="string">
                            @(context.Ativo ? "Ativo" : "Inativo")
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Data de Registro">
                        @(context.DataCriacao.HasValue? context.DataCriacao.Value.ToString("dd/MM/yyyy") : "-")
                    </MudTd>
                    <MudTd DataLabel="Ações" Style="text-align:right">
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight"
                                 TransformOrigin="Origin.TopRight">
                            <MudMenuItem OnClick="@(() => OpenUserDialog(context))">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" Size="Size.Small" /> Editar
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => ChangeUserRole(context))">
                                <MudIcon Icon="@Icons.Material.Filled.ManageAccounts" Class="mr-2" Size="Size.Small" />
                                Mudar Papel
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => ToggleUserStatus(context))">
                                @if (context.Ativo)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Block" Class="mr-2" Size="Size.Small" />
                                    <span>Desativar</span> 
                                                            }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Class="mr-2" Size="Size.Small" />
                                    <span>Ativar</span>
                                    
                                                        }
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => DeleteUser(context))" Style="color: var(--mud-palette-error);">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" Size="Size.Small" /> Excluir
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    }
</MudContainer>

@code {
    private List<UserDTO> _users;
    private bool _loading = true;
    private string _searchTerm = "";
    private string _selectedRole = "";
    private string _statusFilter = "all"; // Alterado para string em vez de bool?
    private CancellationTokenSource _cts;
    private bool _isRendered = false;
    private const string Admin = "Admin";
    private const string User = "User";
    private const string all= "User";
    private const string active= "User";
    private const string inactive= "User";

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Inicializando página de gerenciamento de usuários");
        _loading = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;
            await LoadUsers();
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            // Cancelar qualquer operação anterior
            _cts?.Cancel();
            _cts = new CancellationTokenSource();

            _loading = true;
            StateHasChanged();

            // Adicionar timeout para evitar esperas muito longas
            var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(_cts.Token, timeoutCts.Token);

            // Construir os parâmetros de query
            var queryParams = new List<string>();

            if (!string.IsNullOrWhiteSpace(_searchTerm))
            {
                queryParams.Add($"search={Uri.EscapeDataString(_searchTerm)}");
            }

            if (!string.IsNullOrWhiteSpace(_selectedRole))
            {
                queryParams.Add($"role={Uri.EscapeDataString(_selectedRole)}");
            }

            // Converter o filtro de string para o valor booleano apropriado
            if (_statusFilter == "active")
            {
                queryParams.Add("isActive=true");
            }
            else if (_statusFilter == "inactive")
            {
                queryParams.Add("isActive=false");
            }
            // Para "all" não adicionamos nenhum parâmetro

            // Construir URL com parâmetros
            string endpoint = AppConfig.Api.Endpoints.Users;
            if (queryParams.Any())
            {
                endpoint += $"?{string.Join("&", queryParams)}";
            }

            _users = await Http.GetFromJsonAsync<List<UserDTO>>(endpoint, linkedCts.Token);

            Logger.LogInformation($"Carregados {_users?.Count ?? 0} usuários");
        }
        catch (TaskCanceledException)
        {
            Logger.LogWarning("Carregamento de usuários cancelado");
            Snackbar.Add("A operação foi cancelada. Tente novamente.", Severity.Warning);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar usuários");
            Snackbar.Add("Erro ao carregar lista de usuários. Tente novamente mais tarde.", Severity.Error);
            _users = new List<UserDTO>();
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        await LoadUsers();
    }

    private string GetUserInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "?";

        var parts = name.Split(' ');
        if (parts.Length > 1)
        {
            // Check each part length before accessing index
            if (parts[0].Length > 0 && parts[1].Length > 0)
                return $"{parts[0][0]}{parts[1][0]}";
            else if (parts[0].Length > 0)
                return parts[0][0].ToString();
            else
                return "?";
        }

        // Check if the first part has any characters
        return parts[0].Length > 0 ? parts[0][0].ToString() : "?";
    }

    private async Task OpenUserDialog(UserDTO user)
    {
        if (!_isRendered) return;

        // Aqui haveria a lógica para abrir o diálogo de edição/criação de usuário
        // Implementação será adicionada posteriormente

        var parameters = new DialogParameters();
        if (user != null)
        {
            parameters.Add("User", user);
            parameters.Add("IsEdit", true);
        }
        else
        {
            parameters.Add("IsEdit", false);
        }

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var dialog = await DialogService.ShowAsync<UserDialog>(
            user != null ? "Editar Usuário" : "Adicionar Usuário",
            parameters,
            options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadUsers();
        }
    }

    private async Task ChangeUserRole(UserDTO user)
    {
        if (!_isRendered) return;

        var newRole = user.EhAdmin ? "Usuário" : "Administrador";

        var parameters = new DialogParameters
    {
        { "ContentText", $"Tem certeza que deseja alterar o papel de {user.Name} para {newRole}?" },
        { "ButtonText", "Confirmar" },
        { "Color", Color.Primary }
    };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogReference = DialogService.Show<ConfirmDialog>("Mudar Papel do Usuário", parameters, options);
        var result = await dialogReference.Result;

        if (!result.Canceled)
        {
            try
            {
                // Chamada para a API para mudar o papel do usuário
                string endpoint = string.Format(AppConfig.Api.Endpoints.UpdateUserRole, user.Id);
                Logger.LogInformation($"Chamando endpoint para atualizar papel: {endpoint}");

                var roleUpdateDto = new { Role = user.EhAdmin ? "User" : "Admin" };
                Logger.LogInformation($"Enviando dados: {System.Text.Json.JsonSerializer.Serialize(roleUpdateDto)}");

                var response = await Http.PutAsJsonAsync(endpoint, roleUpdateDto);
                Logger.LogInformation($"Status da resposta: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"Papel do usuário alterado com sucesso para {newRole}!", Severity.Success);
                    await LoadUsers();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Logger.LogError($"Erro detalhado: {errorContent}");
                    Snackbar.Add($"Erro ao alterar papel do usuário: {response.StatusCode}. {errorContent}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Exceção ao alterar papel do usuário {user.Id}: {ex.Message}");
                Snackbar.Add("Erro ao alterar papel do usuário. Tente novamente mais tarde.", Severity.Error);
            }
        }
    }

    private async Task ToggleUserStatus(UserDTO user)
    {
        if (!_isRendered) return;

        var newStatus = !user.Ativo;
        var actionText = newStatus ? "ativar" : "desativar";

        var parameters = new DialogParameters
    {
        { "ContentText", $"Tem certeza que deseja {actionText} o usuário {user.Name}?" },
        { "ButtonText", "Confirmar" },
        { "Color", newStatus ? Color.Success : Color.Error }
    };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogReference = DialogService.Show<ConfirmDialog>($"{(newStatus ? "Ativar" : "Desativar")} Usuário", parameters, options);
        var result = await dialogReference.Result;

        if (!result.Canceled)
        {
            try
            {
                // Chamada para a API para ativar/desativar o usuário
                string endpoint = string.Format(AppConfig.Api.Endpoints.UpdateUser, user.Id);
                Logger.LogInformation($"Chamando endpoint para atualizar status: {endpoint}");

                var statusUpdateDto = new { Ativo = newStatus };
                Logger.LogInformation($"Enviando dados: {System.Text.Json.JsonSerializer.Serialize(statusUpdateDto)}");

                var response = await Http.PutAsJsonAsync(endpoint, statusUpdateDto);
                Logger.LogInformation($"Status da resposta: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"Usuário {actionText}do com sucesso!", Severity.Success);
                    await LoadUsers();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Logger.LogError($"Erro detalhado: {errorContent}");
                    Snackbar.Add($"Erro ao {actionText} usuário: {response.StatusCode}. {errorContent}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Exceção ao {actionText} usuário {user.Id}: {ex.Message}");
                Snackbar.Add($"Erro ao {actionText} usuário. Tente novamente mais tarde.", Severity.Error);
            }
        }
    }

    private async Task DeleteUser(UserDTO user)
    {
        if (!_isRendered) return;

        var parameters = new DialogParameters
    {
        { "ContentText", $"Tem certeza que deseja excluir o usuário {user.Name}? Esta ação não pode ser desfeita." },
        { "ButtonText", "Excluir" },
        { "Color", Color.Error }
    };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogReference = DialogService.Show<ConfirmDialog>("Confirmar Exclusão", parameters, options);
        var result = await dialogReference.Result;

        if (!result.Canceled)
        {
            try
            {
                // Chamada para a API para excluir o usuário
                string endpoint = string.Format(AppConfig.Api.Endpoints.DeleteUser, user.Id);
                Logger.LogInformation($"Chamando endpoint para excluir usuário: {endpoint}");

                var response = await Http.DeleteAsync(endpoint);
                Logger.LogInformation($"Status da resposta: {response.StatusCode}");

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Usuário excluído com sucesso!", Severity.Success);
                    await LoadUsers();
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Logger.LogError($"Erro detalhado: {errorContent}");
                    Snackbar.Add($"Erro ao excluir usuário: {response.StatusCode}. {errorContent}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Exceção ao excluir usuário {user.Id}: {ex.Message}");
                Snackbar.Add("Erro ao excluir usuário. Tente novamente mais tarde.", Severity.Error);
            }
        }
    }

    // Implementar IDisposable para cancelar operações pendentes
    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }
}