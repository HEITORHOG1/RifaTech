@* RifaCard.razor *@
@using RifaTech.DTOs.DTOs

<MudCard Elevation="2" Class="rifa-card h-100">
    <div class="position-relative">
        <MudCardMedia Image="@GetImageUrl()" Height="180" />

        <!-- Badges de status e tempo restante -->
        @if (IsDrawSoon)
        {
            <MudChip T="string" Color="Color.Error"
                     Size="Size.Small"
                     Label="true"
                     Class="position-absolute"
                     Style="top: 8px; right: 8px;">
                @GetShortTimeRemaining()
            </MudChip>
        }

        @if (GetProgressPercentage() > 80)
        {
            <MudChip T="string" Color="Color.Warning"
                     Size="Size.Small"
                     Label="true"
                     Class="position-absolute"
                     Style="top: 8px; left: 8px;">
                Quase Esgotado
            </MudChip>
        }
    </div>

    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6" Class="text-truncate">@Rifa.Name</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudChip Color="Color.Primary" Size="Size.Small" T="string">
                @FormatCurrency((decimal)Rifa.TicketPrice)
            </MudChip>
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent Class="pt-0">
        <MudText Typo="Typo.body2" Class="mb-3 text-truncate d-block">
            @(Rifa.Description?.Length > 80 ? Rifa.Description.Substring(0, 80) + "..." : Rifa.Description)
        </MudText>

        <div class="d-flex align-center mb-2">
            <MudIcon Icon="@Icons.Material.Outlined.EventAvailable" Size="Size.Small" Class="mr-2" />
            <MudText Typo="Typo.body2">
                Sorteio: @FormatDate(Rifa.DrawDateTime)
            </MudText>
        </div>

        <div class="d-flex align-center mb-3">
            <MudIcon Icon="@Icons.Material.Outlined.EmojiEvents" Size="Size.Small" Class="mr-2" />
            <MudText Typo="Typo.body2">
                Prêmio: @FormatCurrency((decimal)Rifa.TicketPrice)
            </MudText>
        </div>

        <MudText Typo="Typo.caption" Class="mt-1 mb-1">
            @GetAvailableTickets() de @Rifa.MaxTickets tickets disponíveis
        </MudText>

        <MudProgressLinear Color="@GetProgressColor()"
                           Value="@GetProgressPercentage()"
                           Class="my-1" />
    </MudCardContent>

    <MudCardActions Class="d-flex justify-space-between">
        <MudButton Variant="Variant.Text"
                   Color="Color.Primary"
                   Href="@($"/rifas/{Rifa.Id}")">
            Detalhes
        </MudButton>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Secondary"
                   Href="@($"/rifas/{Rifa.Id}/comprar")">
            Participar
        </MudButton>
    </MudCardActions>
</MudCard>

<style>
    .rifa-card {
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .rifa-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--mud-elevation-4);
        }
</style>

@code {
    [Parameter]
    public RifaDTO Rifa { get; set; }

    private bool IsDrawSoon => (Rifa.DrawDateTime - DateTime.UtcNow).TotalDays <= 3;

    private string GetImageUrl()
    {
        return string.IsNullOrEmpty(Rifa.Base64Img)
            ? "/images/default-rifa.jpg"
            : $"data:image/png;base64,{Rifa.Base64Img}";
    }

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"));
    }

    private string FormatDate(DateTime date)
    {
        return date.ToString("dd/MM/yy HH:mm");
    }

    private string GetAvailableTickets()
    {
        int ticketsSold = Rifa.Tickets?.Count ?? 0;
        int available = Rifa.MaxTickets - ticketsSold;
        return available.ToString();
    }

    private double GetProgressPercentage()
    {
        if (Rifa.MaxTickets <= 0) return 0;

        int ticketsSold = Rifa.Tickets?.Count ?? 0;
        double percentage = (double)ticketsSold * 100 / Rifa.MaxTickets;

        return percentage;
    }

    private Color GetProgressColor()
    {
        double percentage = GetProgressPercentage();

        if (percentage < 40) return Color.Success;
        if (percentage < 70) return Color.Warning;
        return Color.Error;
    }

    private string GetShortTimeRemaining()
    {
        var timeSpan = Rifa.DrawDateTime - DateTime.UtcNow;

        if (timeSpan.TotalDays < 0)
            return "Encerrado";

        if (timeSpan.TotalDays >= 1)
            return $"{Math.Floor(timeSpan.TotalDays)}d";

        if (timeSpan.TotalHours >= 1)
            return $"{Math.Floor(timeSpan.TotalHours)}h";

        return $"{timeSpan.Minutes}min";
    }
}