@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using RifaTech.DTOs.DTOs
@using System.Net.Http.Json
@using Microsoft.Extensions.Logging
@using RifaTech.UI.Shared.Config
@using RifaTech.UI.Shared.Models
@using RifaTech.UI.Shared.Services
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Login> Logger
@inject IStorageService LocalStorage
@implements IDisposable

<PageTitle>Login - RifaTech</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
    <MudPaper Elevation="3" Class="pa-8">
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6">Entre no RifaTech</MudText>

        <MudTabs Elevation="0" Centered="true" Color="Color.Primary" Class="mt-4" @bind-ActiveIndex="_activeTabIndex">
            <MudTabPanel Text="Login" Icon="@Icons.Material.Filled.Login">
                <EditForm Model="_loginModel" OnValidSubmit="ProcessLogin" Class="mt-4">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (_loginError != null)
                    {
                        <MudAlert Severity="Severity.Error" Class="my-2">@_loginError</MudAlert>
                    }

                    <MudTextField T="string"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_loginModel.Email"
                                  For="@(() => _loginModel.Email)"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="Email é obrigatório"
                                  InputType="InputType.Email"
                                  Class="mb-4" />

                    <MudTextField T="string"
                                  Label="Senha"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_loginModel.Password"
                                  For="@(() => _loginModel.Password)"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="Senha é obrigatória"
                                  InputType="@(_showPassword? InputType.Text: InputType.Password)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(_showPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                  AdornmentClick="() => _showPassword = !_showPassword"
                                  Class="mb-4" />

                    <div class="d-flex justify-space-between align-center mb-6">
                        <MudCheckBox T="bool" @bind-Checked="_rememberMe" Label="Lembrar de mim" />
                        <MudLink Href="/esqueci-senha">Esqueci minha senha</MudLink>
                    </div>

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               FullWidth="true"
                               Disabled="@_processing">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processando</MudText>
                        }
                        else
                        {
                            <MudText>Entrar</MudText>
                        }
                    </MudButton>
                </EditForm>
            </MudTabPanel>

            <MudTabPanel Text="Cadastro" Icon="@Icons.Material.Filled.PersonAdd">
                <EditForm Model="_registerModel" OnValidSubmit="ProcessRegistration" Class="mt-4">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @if (_registerError != null)
                    {
                        <MudAlert Severity="Severity.Error" Class="my-2">@_registerError</MudAlert>
                    }

                    <MudTextField T="string"
                                  Label="Nome Completo"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_registerModel.Name"
                                  For="@(() => _registerModel.Name)"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="Nome é obrigatório"
                                  Class="mb-4" />

                    <MudTextField T="string"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_registerModel.Email"
                                  For="@(() => _registerModel.Email)"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="Email é obrigatório"
                                  InputType="InputType.Email"
                                  Class="mb-4" />

                    <MudTextField T="string"
                                  Label="CPF"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_registerModel.CPF"
                                  For="@(() => _registerModel.CPF)"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="CPF é obrigatório"
                                  Mask="@(new PatternMask("000.000.000-00"))"
                                  Class="mb-4" />

                    <MudTextField T="string"
                                  Label="Senha"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_registerModel.Password"
                                  For="@(() => _registerModel.Password)"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="Senha é obrigatória"
                                  InputType="@(_showPassword? InputType.Text: InputType.Password)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(_showPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                  AdornmentClick="() => _showPassword = !_showPassword"
                                  Class="mb-4" />

                    <MudTextField T="string"
                                  Label="Confirmar Senha"
                                  Variant="Variant.Outlined"
                                  @bind-Value="_registerModel.ConfirmPassword"
                                  For="@(() => _registerModel.ConfirmPassword)"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError="Confirmação de senha é obrigatória"
                                  InputType="@(_showPassword? InputType.Text: InputType.Password)"
                                  Class="mb-6" />

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Size="Size.Large"
                               FullWidth="true"
                               Disabled="@_processing">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processando</MudText>
                        }
                        else
                        {
                            <MudText>Cadastrar</MudText>
                        }
                    </MudButton>
                </EditForm>
            </MudTabPanel>
        </MudTabs>

        <MudDivider Class="mt-8 mb-4" />

        <MudText Align="Align.Center" Typo="Typo.body2" Class="mud-text-secondary">
            Ao fazer login você concorda com nossos
            <MudLink Href="/termos">Termos de Uso</MudLink> e
            <MudLink Href="/privacidade">Política de Privacidade</MudLink>.
        </MudText>

        @if (_debugMode)
        {
            <MudExpansionPanel Class="mt-4">
                <TitleContent>
                    <MudText Typo="Typo.body2">Informações de depuração</MudText>
                </TitleContent>
                <ChildContent>
                    <MudText Typo="Typo.caption">Status de Login: @_loginStatus</MudText>
                    <MudText Typo="Typo.caption">Token: @(_debugToken != null ? _debugToken.Substring(0, Math.Min(50, _debugToken.Length)) + "..." : "Nenhum")</MudText>
                    <MudText Typo="Typo.caption">Role: @_userRole</MudText>
                    <MudText Typo="Typo.caption">IsAdmin: @_isAdmin</MudText>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudPaper>

    @if (_debugMode)
    {
        <MudPaper Class="mt-4 pa-4">
            <MudButton Variant="Variant.Outlined" OnClick="ToggleDebugMode">
                @(_debugMode ? "Ocultar Debug" : "Mostrar Debug")
            </MudButton>

            @if (_debugError != null)
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">@_debugError</MudAlert>
            }
        </MudPaper>
    }
</MudContainer>

@code {
    private LoginDTO _loginModel = new();
    private UserDTO _registerModel = new();
    private bool _showPassword = false;
    private bool _rememberMe = false;
    private bool _processing = false;
    private bool _isRendered = false;
    private int _activeTabIndex = 0;
    private string _loginError;
    private string _registerError;
    private CancellationTokenSource _cts;

    // Debug information
    private bool _debugMode = false;
    private string _loginStatus = "Não iniciado";
    private string _debugToken = null;
    private string _userRole = "Nenhum";
    private bool _isAdmin = false;
    private string _debugError = null;

    // Query parameter for return URL
    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Verificar se já estamos logados e redirecionar
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            if (string.IsNullOrEmpty(ReturnUrl))
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                Navigation.NavigateTo(ReturnUrl);
            }
        }

        // Em ambiente de desenvolvimento, podemos ativar o modo debug
#if DEBUG
        _debugMode = true;
#endif
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;

            try
            {
                // Verificar se já tem email salvo para lembrar - seguro após renderização
                var savedEmail = await LocalStorage.GetItemAsync<string>("email");
                if (!string.IsNullOrEmpty(savedEmail))
                {
                    _loginModel.Email = savedEmail;
                    _rememberMe = true;
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("Não foi possível recuperar email salvo: {Message}", ex.Message);
                // Continuamos mesmo sem conseguir carregar o email
            }
        }
    }

    private void ToggleDebugMode()
    {
        _debugMode = !_debugMode;
    }


    private async Task ProcessLogin()
    {
        if (!_isRendered)
        {
            // Proteção adicional para não processar antes da renderização
            return;
        }

        _loginError = null;

        // Validações básicas no cliente
        if (string.IsNullOrWhiteSpace(_loginModel.Email))
        {
            _loginError = "O email é obrigatório";
            return;
        }

        if (string.IsNullOrWhiteSpace(_loginModel.Password))
        {
            _loginError = "A senha é obrigatória";
            return;
        }

        // Cancelar qualquer operação de login anterior
        _cts?.Cancel();
        _cts = new CancellationTokenSource();

        _processing = true;
        _loginStatus = "Iniciando login";
        _debugError = null;
        StateHasChanged();

        try
        {
            Logger.LogInformation($"Tentando login para usuário: {_loginModel.Email}");

            // Log da URL base para depuração
            var baseUrl = Http.BaseAddress?.ToString() ?? "Não definido";
            Logger.LogInformation($"Base URL do HttpClient: {baseUrl}");

            // Usar o endpoint definido no AppConfig
            string loginEndpoint = AppConfig.Api.Endpoints.Login;
            Logger.LogInformation($"Usando endpoint de login: {loginEndpoint}");

            // Adicionar timeout para evitar que a operação demore muito
            var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(_cts.Token, timeoutCts.Token);

            // Fazer a chamada de API usando o endpoint completo
            var response = await Http.PostAsJsonAsync(loginEndpoint, _loginModel, linkedCts.Token);

            if (response.IsSuccessStatusCode)
            {
                _loginStatus = "Resposta recebida com sucesso";
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>(cancellationToken: linkedCts.Token);

                if (result.Flag)
                {
                    _loginStatus = "Login bem-sucedido";
                    _debugToken = result.Token;
                    _userRole = result.Role;
                    _isAdmin = result.EhAdmin;

                    Logger.LogInformation($"Login bem-sucedido. Token recebido. IsAdmin: {result.EhAdmin}, Role: {result.Role}");

                    try
                    {
                        // Salvar informações no localStorage usando as chaves definidas no AppConfig
                        await LocalStorage.SetItemAsync(AppConfig.LocalStorage.AuthTokenKey, result.Token);
                        await LocalStorage.SetItemAsync(AppConfig.LocalStorage.RefreshTokenKey, result.RefreshToken);

                        // Salvar informações de admin para uso posterior
                        await LocalStorage.SetItemAsync("userRole", result.Role);
                        await LocalStorage.SetItemAsync("isAdmin", result.EhAdmin);
                        await LocalStorage.SetItemAsync("userId", result.Id);

                        if (_rememberMe)
                        {
                            await LocalStorage.SetItemAsync(AppConfig.LocalStorage.UserEmailKey, _loginModel.Email);
                        }
                    }
                    catch (Exception ex)
                    {
                        // Falha ao gravar no localStorage, mas continuamos com o login
                        Logger.LogWarning("Falha ao salvar dados no localStorage: {Message}", ex.Message);
                    }

                    // Notificar o provedor de autenticação
                    if (AuthStateProvider is CustomAuthStateProvider authProvider)
                    {
                        _loginStatus = "Notificando provedor de autenticação";
                        authProvider.NotifyUserAuthentication(result.Token);
                    }

                    Snackbar.Add("Login realizado com sucesso!", Severity.Success);

                    // Redirecionar para a página apropriada
                    if (!string.IsNullOrEmpty(ReturnUrl))
                    {
                        _loginStatus = $"Redirecionando para {ReturnUrl}";
                        Navigation.NavigateTo(ReturnUrl);
                    }
                    else if (result.EhAdmin)
                    {
                        _loginStatus = "Redirecionando para área administrativa";
                        Navigation.NavigateTo("/admin/dashboard");
                    }
                    else
                    {
                        _loginStatus = "Redirecionando para área do usuário";
                        Navigation.NavigateTo("/");
                    }
                }
                else
                {
                    _loginStatus = $"Falha no login: {result.Message}";
                    _loginError = result.Message;
                    _debugError = result.Message;
                    Logger.LogWarning($"Falha no login: {result.Message}");
                    Snackbar.Add(result.Message, Severity.Error);
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _loginStatus = $"Erro na requisição: {response.StatusCode}";
                _loginError = "Falha na autenticação. Verifique suas credenciais.";
                _debugError = error;
                Logger.LogError($"Erro na requisição de login. Status: {response.StatusCode}, Erro: {error}");
                Snackbar.Add($"Erro ao realizar login: {error}", Severity.Error);
            }
        }
        catch (TaskCanceledException)
        {
            _loginStatus = "Requisição cancelada";
            _loginError = "A requisição foi cancelada. Tente novamente.";
            _debugError = "A requisição foi cancelada";
            Logger.LogWarning("Requisição de login cancelada");
            Snackbar.Add("A requisição foi cancelada. Tente novamente.", Severity.Warning);
        }
        catch (Exception ex)
        {
            _loginStatus = $"Exceção: {ex.Message}";
            _loginError = "Ocorreu um erro ao processar o login. Tente novamente.";
            _debugError = ex.ToString();
            Logger.LogError(ex, "Erro ao processar login");
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    private async Task ProcessRegistration()
    {
        if (!_isRendered)
        {
            // Proteção adicional para não processar antes da renderização
            return;
        }

        _registerError = null;

        // Validações básicas no cliente
        if (string.IsNullOrWhiteSpace(_registerModel.Email))
        {
            _registerError = "O email é obrigatório";
            return;
        }

        if (string.IsNullOrWhiteSpace(_registerModel.Password))
        {
            _registerError = "A senha é obrigatória";
            return;
        }

        if (_registerModel.Password != _registerModel.ConfirmPassword)
        {
            _registerError = "As senhas não coincidem";
            return;
        }

        // Cancelar qualquer operação de registro anterior
        _cts?.Cancel();
        _cts = new CancellationTokenSource();

        _processing = true;
        StateHasChanged();

        try
        {
            Logger.LogInformation($"Tentando registrar usuário: {_registerModel.Email}");

            // Adicionar timeout para evitar que a operação demore muito
            var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(_cts.Token, timeoutCts.Token);

            var response = await Http.PostAsJsonAsync("api/manage/register", _registerModel, linkedCts.Token);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<dynamic>(cancellationToken: linkedCts.Token);
                Logger.LogInformation("Cadastro realizado com sucesso");
                Snackbar.Add("Cadastro realizado com sucesso! Faça login para continuar.", Severity.Success);

                // Limpar formulário e mudar para a aba de login
                _registerModel = new UserDTO();
                _activeTabIndex = 0; // Muda para a aba de login
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Logger.LogError($"Erro no registro. Status: {response.StatusCode}, Erro: {error}");
                _registerError = $"Erro ao realizar cadastro: {error}";
                Snackbar.Add($"Erro ao realizar cadastro: {error}", Severity.Error);
            }
        }
        catch (TaskCanceledException)
        {
            Logger.LogWarning("Requisição de registro cancelada");
            _registerError = "A requisição foi cancelada. Tente novamente.";
            Snackbar.Add("A requisição foi cancelada. Tente novamente.", Severity.Warning);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao processar registro");
            _registerError = $"Erro: {ex.Message}";
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processing = false;
            StateHasChanged();
        }
    }

    // Implementar IDisposable para cancelar operações pendentes
    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }
}