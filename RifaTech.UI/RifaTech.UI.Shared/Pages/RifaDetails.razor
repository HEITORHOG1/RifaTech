@page "/rifas/{Id:guid}"
@using System.Net.Http.Json
@using RifaTech.DTOs.DTOs
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@implements IDisposable

<PageTitle>Detalhes da Rifa - RifaTech</PageTitle>

@if (_loading)
{
    <div class="d-flex justify-center my-8">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
    </div>
}
else if (_rifa == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Rifa não encontrada.</MudAlert>
}
else
{
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mud-height-full">
                <MudImage Src="@(string.IsNullOrEmpty(_rifa.Base64Img) ? "/images/default-rifa.jpg" : $"data:image/png;base64,{_rifa.Base64Img}")"
                          Width="100" Height="400" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center"
                          Elevation="3" Class="rounded-lg" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudPaper Class="pa-4 mud-height-full">
                <!-- Detalhes da rifa permanecem iguais -->
            </MudPaper>
        </MudItem>

        @if (_rifa.ExtraNumbers != null && _rifa.ExtraNumbers.Any())
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h5" Class="mb-4">Números Extras</MudText>

                    <MudTable Items="_rifa.ExtraNumbers" Hover="true" Striped="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Número</MudTh>
                            <MudTh>Prêmio</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Número">@context.Number</MudTd>
                            <MudTd DataLabel="Prêmio">@context.PrizeAmount.ToString("C")</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>

    <MudDivider Class="my-6" />

    <MudText Typo="Typo.h5" Class="mb-4">Últimos Tickets Vendidos</MudText>

    @if (_tickets == null || !_tickets.Any())
    {
        <MudAlert Severity="Severity.Info">Nenhum ticket vendido ainda.</MudAlert>
    }
    else
    {
        <MudTable Items="@_tickets.Take(10)" Hover="true" Striped="true">
            <HeaderContent>
                <MudTh>Número</MudTh>
                <MudTh>Cliente</MudTh>
                <MudTh>Data</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Número">@context.Number</MudTd>
                <MudTd DataLabel="Cliente">@GetClienteInitials(context.Cliente?.Name)</MudTd>
                <MudTd DataLabel="Data">@(context.CreatedAt != null ? ((DateTime)context.CreatedAt).ToString("dd/MM/yyyy HH:mm") : "-")</MudTd>
            </RowTemplate>
        </MudTable>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private RifaDTO _rifa;
    private List<TicketDTO> _tickets;
    private bool _loading = true;
    private bool _isRendered = false;
    private CancellationTokenSource _cts;

    protected override async Task OnInitializedAsync()
    {
        await LoadRifa();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;
        }
    }

    private async Task LoadRifa()
    {
        try
        {
            _loading = true;

            // Cancelar qualquer operação anterior
            _cts?.Cancel();
            _cts = new CancellationTokenSource();

            // Adicionar timeout para evitar esperas muito longas
            var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(_cts.Token, timeoutCts.Token);

            // Usar Tasks em paralelo para carregar dados mais rapidamente
            var rifaTask = Http.GetFromJsonAsync<RifaDTO>($"api/rifas/{Id}", linkedCts.Token);
            var ticketsTask = Http.GetFromJsonAsync<List<TicketDTO>>($"api/rifa/{Id}/tickets", linkedCts.Token);

            // Aguardar todas as tasks completarem
            await Task.WhenAll(rifaTask, ticketsTask);

            // Recuperar resultados
            _rifa = await rifaTask;
            _tickets = await ticketsTask;
        }
        catch (TaskCanceledException)
        {
            // Se a operação foi cancelada, não mostramos erro
            Snackbar.Add("A operação foi cancelada. Tente novamente.", Severity.Warning);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar detalhes da rifa: {ex.Message}", Severity.Error);
            _rifa = null;
            _tickets = new List<TicketDTO>();
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ComprarTickets()
    {
        Navigation.NavigateTo($"/rifas/{Id}/comprar");
    }

    private async Task CompartilharRifa()
    {
        if (!_isRendered) return;

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            { "RifaId", Id },
            { "RifaNome", _rifa.Name },
            { "RifaLink", $"{Navigation.BaseUri}rifas/{Id}" }
        };

        await DialogService.ShowAsync<ShareDialog>("Compartilhar Rifa", parameters, options);
    }

    private string GetClienteInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "?";

        var parts = name.Split(' ');
        if (parts.Length > 1)
        {
            // Check each part length before accessing index
            if (parts[0].Length > 0 && parts[1].Length > 0)
                return $"{parts[0][0]}{parts[1][0]}";
            else if (parts[0].Length > 0)
                return parts[0][0].ToString();
            else if (parts[1].Length > 0)
                return parts[1][0].ToString();
            else
                return "?";
        }

        // Check if the first part has any characters
        return parts[0].Length > 0 ? parts[0][0].ToString() : "?";
    }

    // Implementar IDisposable para cancelar operações pendentes
    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }
}