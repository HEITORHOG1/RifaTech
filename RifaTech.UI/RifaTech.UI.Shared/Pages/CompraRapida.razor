@page "/rifas/{Id:guid}/compra-rapida"
@using System.Net.Http.Json
@using RifaTech.DTOs.DTOs
@using RifaTech.UI.Shared.Services
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ClienteRecorrenteService ClienteRecorrenteService

<PageTitle>Compra Rápida - RifaTech</PageTitle>

@if (_loading)
{
    <div class="d-flex justify-center my-8">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
    </div>
}
else if (_rifa == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Rifa não encontrada.</MudAlert>
}
else
{
    <MudCard Elevation="3" Class="pa-4 mb-6">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Primary">
                    <MudIcon Icon="@Icons.Material.Filled.FlashOn" />
                </MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Compra Rápida</MudText>
                <MudText Typo="Typo.body2">Participe da rifa @_rifa.Name em apenas 1 minuto!</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <MudGrid>
                <!-- Coluna da esquerda - Informações da rifa -->
                <MudItem xs="12" md="5">
                    <MudCard Elevation="0" Outlined="true" Class="pa-3">
                        <MudCardMedia Image="@GetRifaImage()" Height="140" Class="rounded-lg mb-2" />

                        <MudText Typo="Typo.h6" Class="mb-2">@_rifa.Name</MudText>
                        <MudText Typo="Typo.caption" Class="mb-2">
                            Sorteio: @_rifa.DrawDateTime.ToString("dd/MM/yyyy HH:mm")
                        </MudText>

                        <MudDivider Class="my-2" />

                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudText Typo="Typo.body2"><b>Preço por número:</b></MudText>
                            <MudText Typo="Typo.body1" Color="Color.Primary">@FormatCurrency((decimal)_rifa.TicketPrice)</MudText>
                        </div>

                        <div class="d-flex justify-space-between align-center mb-2">
                            <MudText Typo="Typo.body2"><b>Prêmio:</b></MudText>
                            <MudText Typo="Typo.body1" Color="Color.Secondary">@FormatCurrency(_rifa.PriceValue)</MudText>
                        </div>

                        <MudText Typo="Typo.caption" Class="mt-2">
                            @(_rifa.MaxTickets - (_rifa.Tickets?.Count ?? 0)) números disponíveis de @_rifa.MaxTickets
                        </MudText>
                        <MudProgressLinear Color="Color.Primary"
                                           Value="@((_rifa.Tickets?.Count ?? 0) * 100 / Math.Max(1, _rifa.MaxTickets))"
                                           Class="mb-3" />
                    </MudCard>
                </MudItem>

                <!-- Coluna da direita - Formulário de compra -->
                <MudItem xs="12" md="7">
                    <EditForm Model="_compraRapida" OnValidSubmit="FinalizarCompra">
                        <DataAnnotationsValidator />

                        @if (_clienteExistente)
                        {
                            <MudAlert Severity="Severity.Success" Class="mb-4">
                                <div class="d-flex align-center justify-space-between">
                                    <div>
                                        <MudText Typo="Typo.body1">Olá, @_compraRapida.Name!</MudText>
                                        <MudText Typo="Typo.caption">Seus dados foram recuperados de uma compra anterior.</MudText>
                                    </div>
                                    <MudButton Variant="Variant.Text"
                                               Color="Color.Primary"
                                               OnClick="LimparDadosCliente">
                                        Limpar
                                    </MudButton>
                                </div>
                            </MudAlert>
                        }

                        <MudGrid>
                            <!-- Quantidade de números -->
                            <MudItem xs="12">
                                <MudCard Elevation="0" Outlined="true" Class="pa-3 mb-3">
                                    <MudText Typo="Typo.subtitle1" Class="mb-2">
                                        <b>Quantidade de números:</b> @_compraRapida.Quantidade
                                    </MudText>

                                    <MudSlider @bind-Value="_compraRapida.Quantidade"
                                               Min="1" Max="50"
                                               Color="Color.Primary"
                                               ValueLabel="true"
                                               Class="py-2" />

                                    <div class="d-flex justify-center flex-wrap gap-2 mt-2">
                                        <!-- Botões de quantidade rápida -->
                                        @foreach (var qtd in new[] { 1, 5, 10, 20, 50 })
                                        {
                                            <MudButton Variant="Variant.Outlined"
                                                       Size="Size.Small"
                                                       Color="Color.Primary"
                                                       OnClick="() => _compraRapida.Quantidade = qtd">
                                                @qtd
                                            </MudButton>
                                        }
                                    </div>
                                </MudCard>
                            </MudItem>

                            <!-- Dados pessoais -->
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="_compraRapida.Name"
                                              Label="Nome"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              RequiredError="Nome é obrigatório"
                                              Immediate="true"
                                              FullWidth="true"
                                              Disabled="@_processando"
                                              Class="mb-3" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="_compraRapida.PhoneNumber"
                                              Label="Telefone"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              RequiredError="Telefone é obrigatório"
                                              Immediate="true"
                                              FullWidth="true"
                                              Disabled="@_processando"
                                              Class="mb-3" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField @bind-Value="_compraRapida.Email"
                                              Label="Email"
                                              Variant="Variant.Outlined"
                                              Required="true"
                                              RequiredError="Email é obrigatório"
                                              Immediate="true"
                                              FullWidth="true"
                                              Disabled="@_processando"
                                              Class="mb-3" />
                            </MudItem>

                            <!-- Resumo da compra -->
                            <MudItem xs="12">
                                <MudCard Elevation="0" Outlined="true" Class="pa-4 mud-background-gray rounded mb-4">
                                    <MudText Typo="Typo.subtitle1" Class="mb-2">Resumo da compra</MudText>

                                    <div class="d-flex justify-space-between mb-1">
                                        <MudText>@_compraRapida.Quantidade x Tickets a @FormatCurrency((decimal)_rifa.TicketPrice)</MudText>
                                        <MudText>@FormatCurrency(_compraRapida.Quantidade * (decimal)_rifa.TicketPrice)</MudText>
                                    </div>

                                    <MudDivider Class="my-2" />

                                    <div class="d-flex justify-space-between">
                                        <MudText Typo="Typo.subtitle1"><b>Total</b></MudText>
                                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                                            <b>@FormatCurrency(_compraRapida.Quantidade * (decimal)_rifa.TicketPrice)</b>
                                        </MudText>
                                    </div>
                                </MudCard>
                            </MudItem>

                            <MudItem xs="12">
                                <MudCheckBox T="bool" @bind-Checked="_termsAccepted"
                                             Label="Li e concordo com os termos e condições"
                                             Color="Color.Primary"
                                             Disabled="@_processando" />
                            </MudItem>
                        </MudGrid>

                        <div class="d-flex mt-4">
                            <MudButton Variant="Variant.Outlined"
                                       Color="Color.Primary"
                                       Href="@($"/rifas/{Id}")"
                                       Class="mr-2">
                                Voltar
                            </MudButton>

                            <MudButton ButtonType="ButtonType.Submit"
                                       Variant="Variant.Filled"
                                       Color="Color.Secondary"
                                       Size="Size.Large"
                                       FullWidth="true"
                                       Disabled="@(!_termsAccepted || _processando)">
                                @if (_processando)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processando...</MudText>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.FlashOn" Class="mr-2" />
                                    <MudText>Comprar com PIX</MudText>
                                }
                            </MudButton>
                        </div>
                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private RifaDTO _rifa;
    private CompraRapidaDTO _compraRapida = new CompraRapidaDTO { Quantidade = 1 };
    private bool _loading = true;
    private bool _termsAccepted = false;
    private bool _processando = false;
    private bool _clienteExistente = false;
    private bool _isRendered = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadRifa();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;
            // Informamos ao serviço que a renderização ocorreu
            ClienteRecorrenteService.SetRendered();
            await CarregarClienteRecorrente();
            StateHasChanged();
        }
    }
    private async Task LoadRifa()
    {
        try
        {
            _loading = true;
            _rifa = await Http.GetFromJsonAsync<RifaDTO>($"api/rifas/{Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar detalhes da rifa: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task CarregarClienteRecorrente()
    {
        try
        {
            // Este método agora só será executado após a renderização e é seguro
            var cliente = await ClienteRecorrenteService.ObterClienteRecorrenteAsync();
            if (cliente != null)
            {
                _compraRapida.Name = cliente.Name;
                _compraRapida.Email = cliente.Email;
                _compraRapida.PhoneNumber = cliente.PhoneNumber;
                _clienteExistente = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
            // Silenciar exceções relacionadas ao localStorage
        }
    }

    private void LimparDadosCliente()
    {
        _compraRapida.Name = string.Empty;
        _compraRapida.Email = string.Empty;
        _compraRapida.PhoneNumber = string.Empty;
        _clienteExistente = false;
        ClienteRecorrenteService.LimparClienteRecorrenteAsync();
    }

    private async Task FinalizarCompra()
    {
        if (!_termsAccepted)
        {
            Snackbar.Add("Você precisa aceitar os termos e condições para continuar.", Severity.Warning);
            return;
        }

        _processando = true;

        try
        {
            // Realizar a compra rápida
            var response = await Http.PostAsJsonAsync($"api/compra-rapida/{Id}", _compraRapida);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CompraRapidaResponseDTO>();

                // Salvar cliente para compras futuras
                if (result.Cliente != null)
                {
                    await ClienteRecorrenteService.SalvarClienteRecorrenteAsync(result.Cliente);
                }

                // Mostrar diálogo com QR Code para pagamento
                var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
                var parameters = new DialogParameters
                {
                    { "Payment", result.Payment },
                    { "RifaId", Id },
                    { "Amount", result.ValorTotal }
                };

                await DialogService.ShowAsync<PixPaymentDialog>("Pagamento PIX", parameters, options);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                throw new Exception($"Erro ao processar compra: {error}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processando = false;
        }
    }

    private string GetRifaImage()
    {
        return string.IsNullOrEmpty(_rifa.Base64Img)
            ? "/images/default-rifa.jpg"
            : $"data:image/png;base64,{_rifa.Base64Img}";
    }

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"));
    }
}