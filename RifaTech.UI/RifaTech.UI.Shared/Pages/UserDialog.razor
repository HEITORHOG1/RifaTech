@using Microsoft.Extensions.Logging
@using MudBlazor
@using RifaTech.DTOs.DTOs
@using System.Net.Http.Json
@using RifaTech.UI.Shared.Config
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject ILogger<UserDialog> Logger

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;" Class="pa-0">
            <MudText Typo="Typo.h6" Class="mb-4">@(IsEdit ? "Editar Usuário" : "Adicionar Usuário")</MudText>

            <EditForm Model="@_userModel" OnValidSubmit="SaveUser">
                <DataAnnotationsValidator />
                <MudCard Elevation="0">
                    <MudCardContent>
                        <MudTextField @bind-Value="_userModel.Name"
                                      Label="Nome Completo"
                                      Variant="Variant.Outlined"
                                      Required="true"
                                      RequiredError="Nome é obrigatório"
                                      For="@(() => _userModel.Name)"
                                      Class="mb-4" />

                        <MudTextField @bind-Value="_userModel.Email"
                                      Label="Email"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Required="true"
                                      RequiredError="Email é obrigatório"
                                      For="@(() => _userModel.Email)"
                                      Class="mb-4" />

                        @if (!IsEdit)
                        {
                            <MudTextField @bind-Value="_userModel.Password"
                                          Label="Senha"
                                          Variant="Variant.Outlined"
                                          InputType="@(_showPassword? InputType.Text: InputType.Password)"
                                          Required="true"
                                          RequiredError="Senha é obrigatória"
                                          For="@(() => _userModel.Password)"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@(_showPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                          AdornmentClick="() => _showPassword = !_showPassword"
                                          Class="mb-4" />

                            <MudTextField @bind-Value="_userModel.ConfirmPassword"
                                          Label="Confirmar Senha"
                                          Variant="Variant.Outlined"
                                          InputType="@(_showPassword? InputType.Text: InputType.Password)"
                                          Required="true"
                                          RequiredError="Confirmação de senha é obrigatória"
                                          For="@(() => _userModel.ConfirmPassword)"
                                          Class="mb-4" />
                        }

                        <MudSelect T="bool" @bind-Value="_userModel.EhAdmin"
                                   Label="Papel do Usuário"
                                   Variant="Variant.Outlined"
                                   Class="mb-4">
                            <MudSelectItem Value="false">Usuário Regular</MudSelectItem>
                            <MudSelectItem Value="true">Administrador</MudSelectItem>
                        </MudSelect>

                        <MudSelect T="bool" @bind-Value="_userModel.Ativo"
                                   Label="Status"
                                   Variant="Variant.Outlined"
                                   Class="mb-4">
                            <MudSelectItem Value="true">Ativo</MudSelectItem>
                            <MudSelectItem Value="false">Inativo</MudSelectItem>
                        </MudSelect>

                        @if (!string.IsNullOrEmpty(_errorMessage))
                        {
                            <MudAlert Severity="Severity.Error" Class="my-2">@_errorMessage</MudAlert>
                        }
                    </MudCardContent>
                </MudCard>
            </EditForm>
        </MudContainer>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancelar</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="SaveUser"
                   Disabled="@_processing">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processando</MudText>
            }
            else
            {
                <MudText>Salvar</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }


    [Parameter] public UserDTO User { get; set; }
    [Parameter] public bool IsEdit { get; set; }

    private UserDTO _userModel = new UserDTO();
    private bool _showPassword = false;
    private bool _processing = false;
    private string _errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        if (IsEdit && User != null)
        {
            // Clone para evitar mudanças acidentais no objeto original
            _userModel = new UserDTO
            {
                Id = User.Id,
                Name = User.Name,
                Email = User.Email,
                EhAdmin = User.EhAdmin,
                Ativo = User.Ativo,
                DataCriacao = User.DataCriacao
            };
        }
        else
        {
            // Valores padrão para novo usuário
            _userModel = new UserDTO
            {
                Ativo = true,
                EhAdmin = false,
                DataCriacao = DateTime.Now
            };
        }
    }

    private async Task SaveUser()
    {
        _errorMessage = string.Empty;

        // Validações básicas
        if (string.IsNullOrWhiteSpace(_userModel.Name))
        {
            _errorMessage = "Nome é obrigatório";
            return;
        }

        if (string.IsNullOrWhiteSpace(_userModel.Email))
        {
            _errorMessage = "Email é obrigatório";
            return;
        }

        if (!IsEdit)
        {
            if (string.IsNullOrWhiteSpace(_userModel.Password))
            {
                _errorMessage = "Senha é obrigatória";
                return;
            }

            if (_userModel.Password != _userModel.ConfirmPassword)
            {
                _errorMessage = "As senhas não coincidem";
                return;
            }
        }

        _processing = true;

        try
        {
            HttpResponseMessage response;

            if (IsEdit)
            {
                // Atualizar usuário existente
                string endpoint = string.Format(AppConfig.Api.Endpoints.UpdateUser, _userModel.Id);
                response = await Http.PutAsJsonAsync(endpoint, _userModel);
            }
            else
            {
                // Criar novo usuário
                response = await Http.PostAsJsonAsync(AppConfig.Api.Endpoints.Register, _userModel);
            }

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Usuário {(IsEdit ? "atualizado" : "criado")} com sucesso!", Severity.Success);
                MudDialog.Close(MudBlazor.DialogResult.Ok(true));

            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _errorMessage = $"Erro: {response.StatusCode}. {error}";
                Logger.LogError($"Erro ao {(IsEdit ? "atualizar" : "criar")} usuário: {_errorMessage}");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erro: {ex.Message}";
            Logger.LogError(ex, $"Exceção ao {(IsEdit ? "atualizar" : "criar")} usuário");
        }
        finally
        {
            _processing = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}