@page "/"
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using MudBlazor
@using RifaTech.DTOs.DTOs
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using RifaTech.UI.Shared.Config;
@using RifaTech.UI.Shared.Helpers
@using System.Text.Json
@implements IDisposable

<PageTitle>RifaTech - Rifas Online</PageTitle>

<PageTitle>RifaTech - Rifas Online</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 mb-16">
    <!-- Banner rotativo com rifas em destaque -->
    @if (_loading)
    {
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" Animation="Animation.Wave" />
    }
    else if (_featuredRifas?.Any() == true)
    {
        <MudPaper Elevation="0" Class="mb-8">
            <MudCarousel Class="mud-width-full featured-carousel" Style="height:400px;"
                         ShowArrows="true"
                         ShowDelimiters="true"
                         AutoCycle="true"
                         TData="RifaDTO">
                @foreach (var rifa in _featuredRifas.Take(5))
                {
                    <MudCarouselItem Transition="Transition.Slide" Color="@Color.Primary">
                        <div class="d-flex flex-grow-1 position-relative">
                            <!-- Imagem de fundo com sobreposição escura -->
                            <div class="position-absolute" style="top:0; left:0; right:0; bottom:0; background-position: center; background-size: cover;
                                         background-image: url('@GetRifaImage(rifa)'); filter: brightness(0.7);">
                            </div>

                            <!-- Conteúdo do banner -->
                            <div class="d-flex flex-column justify-center align-center position-relative" style="z-index:1; width:100%;">
                                <MudContainer MaxWidth="MaxWidth.Medium">
                                    <MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Default" Class="mb-4 text-white featured-title">
                                        @rifa.Name
                                    </MudText>

                                    <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Default" Class="mb-4 text-white">
                                        @(rifa.Description?.Length > 150 ? rifa.Description.Substring(0, 150) + "..." : rifa.Description)
                                    </MudText>

                                    <div class="d-flex justify-center mt-4 flex-wrap">
                                        <!-- Contador regressivo usando o componente CountdownTimer -->
                                        <MudCard Elevation="3" Class="pa-3 mx-2 mb-2 feature-info-card" Style="background-color: rgba(0,0,0,0.7);">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Default" Align="Align.Center" Class="text-white">Sorteio em</MudText>
                                            <CountdownTimer TargetDate="@rifa.DrawDateTime"
                                            ValueClass="text-white text-center"
                                            LabelClass="text-white opacity-70"
                                            TextClass="text-error"
                                            Typo="Typo.h5" />
                                        </MudCard>

                                        <!-- Preço do ticket -->
                                        <MudCard Elevation="3" Class="pa-3 mx-2 mb-2 feature-info-card" Style="background-color: rgba(0,0,0,0.7);">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Default" Align="Align.Center" Class="text-white">Valor do Ticket</MudText>
                                            <MudText Typo="Typo.h5" Color="Color.Info" Align="Align.Center">@FormatCurrency((decimal)rifa.TicketPrice)</MudText>
                                        </MudCard>

                                        <!-- Progresso -->
                                        <MudCard Elevation="3" Class="pa-3 mx-2 mb-2 feature-info-card" Style="background-color: rgba(0,0,0,0.7);">
                                            <MudText Typo="Typo.subtitle1" Color="Color.Default" Align="Align.Center" Class="text-white">Tickets Vendidos</MudText>
                                            <MudText Typo="Typo.h5" Color="Color.Warning" Align="Align.Center">
                                                @(GetProgressPercentage(rifa))%
                                            </MudText>
                                        </MudCard>
                                    </div>

                                    <div class="d-flex justify-center mt-6">
                                        <MudButton Variant="Variant.Filled"
                                        Color="Color.Secondary"
                                        Size="Size.Large"
                                        OnClick="@(() => NavigateToComprar(rifa.Id))"
                                        Class="px-8 py-3 participar-button">
                                            Participar Agora
                                        </MudButton>
                                    </div>
                                </MudContainer>
                            </div>
                        </div>
                    </MudCarouselItem>
                }
            </MudCarousel>
        </MudPaper>
    }

    <!-- Próximos sorteios -->
    <div class="section-header d-flex align-center mb-4">
        <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Color="Color.Primary" Class="mr-2" />
        <MudText Typo="Typo.h4">Próximos Sorteios</MudText>
    </div>

    @if (_loading)
    {
        <MudGrid>
            @for (int i = 0; i < 3; i++)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" Animation="Animation.Wave" />
                        <MudCardContent>
                            <MudSkeleton Width="90%" Height="20px" Animation="Animation.Wave" />
                            <MudSkeleton Width="70%" Height="20px" Animation="Animation.Wave" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else if (_upcomingRifas?.Any() == true)
    {
        <MudPaper Elevation="0" Class="pa-4 mb-4 mud-background-gray rounded-lg">
            <MudText Typo="Typo.body1" Class="mb-2">
                <strong>Atenção:</strong> Não perca as oportunidades de participar destes sorteios que estão próximos!
            </MudText>
        </MudPaper>

        <MudGrid>
            @foreach (var rifa in _upcomingRifas)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="3" Outlined="true" Class="h-100 rifa-card">
                        <div class="position-relative">
                            <MudCardMedia Image="@GetRifaImage(rifa)" Height="200" Class="rifa-image" />

                            <!-- Badge com contagem regressiva -->
                            <MudChip T="string" Color="Color.Error"
                            Size="Size.Large"
                            Label="true"
                            Class="position-absolute countdown-chip"
                            Style="top: 10px; right: 10px;">
                                @GetShortTimeRemaining(rifa.DrawDateTime)
                            </MudChip>
                        </div>

                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-2 text-truncate rifa-title">@rifa.Name</MudText>
                            <MudText Typo="Typo.body2" Class="mb-3 text-truncate d-block">
                                @(rifa.Description?.Length > 100 ? rifa.Description.Substring(0, 100) + "..." : rifa.Description)
                            </MudText>

                            <div class="d-flex justify-space-between align-center">
                                <MudText Typo="Typo.h6" Color="Color.Primary">@FormatCurrency((decimal)rifa.TicketPrice)</MudText>
                                <MudChip T="string" Color="Color.Info" Size="Size.Small" Label="true">
                                    Prêmio: @FormatCurrency(rifa.PriceValue)
                                </MudChip>
                            </div>

                            <!-- Barra de progresso -->
                            <div class="my-3">
                                <MudText Typo="Typo.caption" Class="mb-1">
                                    @(rifa.Tickets?.Count ?? 0) de @rifa.MaxTickets tickets vendidos
                                </MudText>
                                <MudProgressLinear Color="@GetProgressColor(rifa)"
                                Value="@GetProgressPercentage(rifa)"
                                Class="my-1"
                                Striped="true" />
                            </div>
                        </MudCardContent>

                        <MudCardActions Class="d-flex justify-space-between">
                            <MudButton Variant="Variant.Text"
                            Color="Color.Primary"
                            OnClick="@(() => NavigateToRifa(rifa.Id))">
                                Ver Detalhes
                            </MudButton>

                            <MudButton Variant="Variant.Filled"
                            Color="Color.Secondary"
                            OnClick="@(() => NavigateToComprar(rifa.Id))">
                                Participar
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="my-4">Nenhum sorteio disponível no momento.</MudAlert>
    }

    <!-- Rifas em destaque -->
    <MudDivider Class="my-8" />

    <div class="section-header d-flex align-center mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Stars" Color="Color.Primary" Class="mr-2" />
        <MudText Typo="Typo.h4">Rifas em Destaque</MudText>
    </div>

    @if (_loading)
    {
        <MudGrid>
            @for (int i = 0; i < 6; i++)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Elevation="2">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" Animation="Animation.Wave" />
                        <MudCardContent>
                            <MudSkeleton Width="90%" Height="20px" Animation="Animation.Wave" />
                            <MudSkeleton Width="70%" Height="20px" Animation="Animation.Wave" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else if (_rifas?.Any() == true)
    {
        <MudGrid>
            @foreach (var rifa in _rifas.Take(8))
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <RifaCard Rifa="rifa" />
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="my-4">Nenhuma rifa disponível no momento.</MudAlert>
    }

    <div class="d-flex justify-center mt-6">
        <MudButton Variant="Variant.Outlined"
        Color="Color.Primary"
        Href="/rifas"
        Class="ver-mais-button">
            <MudIcon Icon="@Icons.Material.Filled.ViewList" Class="mr-2" /> Ver todas as rifas
        </MudButton>
    </div>

    <!-- Como funciona -->
    <MudDivider Class="my-8" />

    <div class="section-header d-flex align-center mb-6">
        <MudIcon Icon="@Icons.Material.Filled.Help" Color="Color.Primary" Class="mr-2" />
        <MudText Typo="Typo.h4">Como Funciona</MudText>
    </div>

    <MudPaper Elevation="0" Class="pa-4 mb-6 mud-background-gray rounded-lg">
        <MudText Typo="Typo.body1" Class="mb-0">
            Participar é simples e rápido! Basta seguir os passos abaixo e concorrer a prêmios incríveis.
        </MudText>
    </MudPaper>

    <MudGrid>
        <MudItem xs="12" sm="4">
            <MudCard Class="step-card h-100" Elevation="2">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Primary" Size="Size.Large">1</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Escolha uma Rifa</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">
                        Navegue pelas rifas disponíveis e escolha a que mais lhe interessa.
                        Veja detalhes como valor do prêmio, data do sorteio e preço por número.
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="4">
            <MudCard Class="step-card h-100" Elevation="2">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Primary" Size="Size.Large">2</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Compre Tickets</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">
                        Escolha quantos tickets deseja e realize o pagamento via PIX.
                        O pagamento é rápido, seguro e você recebe seus números imediatamente.
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="4">
            <MudCard Class="step-card h-100" Elevation="2">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Primary" Size="Size.Large">3</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Aguarde o Sorteio</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.body1">
                        Receba seus números e acompanhe o sorteio ao vivo.
                        Se for o ganhador, receberá o prêmio conforme o regulamento.
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

<style>
    .rifa-card {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    overflow: hidden;
    }

    .rifa-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--mud-elevation-4);
    }

    .step-card {
    transition: transform 0.3s ease, background-color 0.3s ease;
    }

    .step-card:hover {
    transform: scale(1.02);
    background-color: var(--mud-palette-background-grey);
    }

    .featured-carousel {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .featured-title {
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .text-white {
    color: white !important;
    }

    .countdown-chip {
    font-weight: bold;
    }

    .feature-info-card {
    min-width: 150px;
    }

    .rifa-image {
    transition: transform 0.3s ease;
    }

    .rifa-card:hover .rifa-image {
    transform: scale(1.05);
    }

    .participar-button {
    font-weight: bold;
    letter-spacing: 0.5px;
    transition: transform 0.2s ease;
    }

    .participar-button:hover {
    transform: scale(1.05);
    }

    .section-header {
    position: relative;
    padding-bottom: 8px;
    }

    .section-header:after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 80px;
    height: 3px;
    background-color: var(--mud-palette-primary);
    }

    .ver-mais-button {
    padding: 10px 20px;
    }

    .rifa-title {
    font-weight: 600;
    }

    /* Lazy Loading para imagens */
    .rifa-image {
    opacity: 0;
    animation: fadeIn 0.5s forwards;
    }

    @@keyframes fadeIn {
    from

    {
    opacity: 0;
    }

    to {
    opacity: 1;
    }

    }
</style>

@code {
    private List<RifaDTO> _rifas;
    private List<RifaDTO> _featuredRifas;
    private List<RifaDTO> _upcomingRifas;
    private bool _loading = true;
    private LogHelper _logger;
    private bool _isRendered = false;
    private CancellationTokenSource _cts;

    protected override async Task OnInitializedAsync()
    {
        // Inicializa o estado, mas não realiza operações que podem causar erros de JS interop
        _loading = true;
        _rifas = new List<RifaDTO>();
        _featuredRifas = new List<RifaDTO>();
        _upcomingRifas = new List<RifaDTO>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true;

            // Inicializa o logger após a renderização
            try
            {
                _logger = new LogHelper(JSRuntime, "Home", true);
                await _logger.LogAsync("Inicializando página Home", Helpers.LogLevel.Info);
            }
            catch (Exception)
            {
                // Se não conseguir inicializar o logger, continuamos mesmo assim
            }

            // Agora é seguro inicializar o monitoramento e carregar os dados
            try
            {
                await InitializeJsMonitoring();
            }
            catch (Exception)
            {
                // Se falhar o monitoramento, continuamos mesmo assim
            }

            // Carregamos os dados após a renderização para evitar erros de JS interop
            await LoadRifas();
        }
    }
    private async Task InitializeJsMonitoring()
    {
        if (!_isRendered) return;

        try
        {
            await JSRuntime.InvokeVoidAsync("setupNetworkMonitoring");
            if (_logger != null)
            {
                await _logger.LogAsync("Monitoramento de rede inicializado", LogLevel.Success);
            }
        }
        catch (Exception ex)
        {
            // Se o logger estiver disponível, registra o erro
            if (_logger != null)
            {
                await _logger.LogExceptionAsync(ex, "Erro ao inicializar monitoramento");
            }
            // Mesmo com erro, continuamos a execução
        }
    }
    private async Task LoadRifas()
    {
        try
        {
            // Cancelamos qualquer carregamento anterior
            _cts?.Cancel();
            _cts = new CancellationTokenSource();

            _loading = true;
            StateHasChanged(); // Atualizar UI para mostrar loading

            // Log de início do carregamento (seguro agora que estamos após renderização)
            if (_logger != null)
            {
                await _logger.LogAsync("Iniciando carregamento de rifas", LogLevel.Info);
            }

            // Carrega todas as rifas com tratamento de erro mais robusto
            try
            {
                if (_logger != null)
                {
                    await _logger.LogAsync($"Chamando API: {AppConfig.Api.Endpoints.Rifas}", LogLevel.Debug);
                }

                // Adicionamos timeout de 15 segundos para evitar esperas muito longas
                var timeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
                using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(_cts.Token, timeoutCts.Token);

                var response = await Http.GetAsync(AppConfig.Api.Endpoints.Rifas, linkedCts.Token);

                // Verifica se a requisição foi bem-sucedida
                if (response.IsSuccessStatusCode)
                {
                    _rifas = await response.Content.ReadFromJsonAsync<List<RifaDTO>>(cancellationToken: linkedCts.Token);

                    if (_logger != null)
                    {
                        await _logger.LogAsync($"API respondeu com sucesso - Recebidas {_rifas?.Count ?? 0} rifas", LogLevel.Success);
                    }

                    if (_rifas?.Count > 0 && _logger != null)
                    {
                        // Log de algumas rifas para verificar os dados
                        await _logger.LogObjectAsync("Primeira rifa recebida", _rifas.First(), LogLevel.Debug);
                    }

                    // Processar as rifas recebidas
                    await ProcessRifas();
                }
                else
                {
                    // Loga detalhes do erro HTTP
                    string errorContent = await response.Content.ReadAsStringAsync();
                    if (_logger != null)
                    {
                        await _logger.LogAsync($"API retornou status {response.StatusCode}: {errorContent}", LogLevel.Error);
                    }
                    Snackbar.Add($"Erro ao carregar rifas: {response.StatusCode} - {response.ReasonPhrase}", Severity.Error);
                    _rifas = new List<RifaDTO>();
                    _featuredRifas = new List<RifaDTO>();
                    _upcomingRifas = new List<RifaDTO>();
                }
            }
            catch (OperationCanceledException)
            {
                // Requisição foi cancelada, não mostramos erro
            }
            catch (HttpRequestException httpEx)
            {
                if (_logger != null)
                {
                    await _logger.LogExceptionAsync(httpEx, "Erro de conexão HTTP");
                }
                Snackbar.Add("Erro de conexão com o servidor. Verifique sua rede e tente novamente.", Severity.Error);
                _rifas = new List<RifaDTO>();
                _featuredRifas = new List<RifaDTO>();
                _upcomingRifas = new List<RifaDTO>();
            }
            catch (JsonException jsonEx)
            {
                if (_logger != null)
                {
                    await _logger.LogExceptionAsync(jsonEx, "Erro ao processar JSON");
                }
                Snackbar.Add("Erro ao processar dados do servidor.", Severity.Error);
                _rifas = new List<RifaDTO>();
                _featuredRifas = new List<RifaDTO>();
                _upcomingRifas = new List<RifaDTO>();
            }

            if (_rifas == null)
            {
                _rifas = new List<RifaDTO>();
            }

            // Sempre garantimos que temos listas válidas, mesmo vazias
            if (_featuredRifas == null)
            {
                _featuredRifas = new List<RifaDTO>();
            }

            if (_upcomingRifas == null)
            {
                _upcomingRifas = new List<RifaDTO>();
            }
        }
        catch (Exception ex)
        {
            if (_logger != null)
            {
                await _logger.LogExceptionAsync(ex, "Erro no carregamento de rifas");
            }
            Snackbar.Add("Erro ao carregar rifas: " + ex.Message, Severity.Error);

            // Garantir que temos listas válidas mesmo com erro
            _rifas = _rifas ?? new List<RifaDTO>();
            _featuredRifas = _featuredRifas ?? new List<RifaDTO>();
            _upcomingRifas = _upcomingRifas ?? new List<RifaDTO>();
        }
        finally
        {
            _loading = false;
            StateHasChanged(); // Atualizar UI após carga dos dados
        }
    }
    private async Task ProcessRifas()
    {
        if (_rifas == null || !_rifas.Any())
        {
            _featuredRifas = new List<RifaDTO>();
            _upcomingRifas = new List<RifaDTO>();
            return;
        }

        try
        {
            if (_logger != null)
            {
                await _logger.LogAsync("Processando rifas recebidas", LogLevel.Info);
            }

            // Separa as rifas em destaque (com maior porcentagem de vendas)
            _featuredRifas = _rifas
                .Where(r => r.DrawDateTime > DateTime.UtcNow)
                .OrderByDescending(r => (r.Tickets?.Count ?? 0) * 100.0 / Math.Max(1, r.MaxTickets))
                .Take(5)
                .ToList();

            if (_logger != null)
            {
                await _logger.LogAsync($"Rifas em destaque processadas: {_featuredRifas.Count}", LogLevel.Info);
            }

            // Separa as rifas com sorteio mais próximo
            _upcomingRifas = _rifas
                .Where(r => r.DrawDateTime > DateTime.UtcNow)
                .OrderBy(r => r.DrawDateTime)
                .Take(6)
                .ToList();

            if (_logger != null)
            {
                await _logger.LogAsync($"Próximos sorteios processados: {_upcomingRifas.Count}", LogLevel.Info);
            }

            // Pré-carregamento de imagens seguro (após renderização)
            if (_isRendered)
            {
                await PreloadFeaturedImages();
            }
        }
        catch (Exception ex)
        {
            if (_logger != null)
            {
                await _logger.LogExceptionAsync(ex, "Erro ao processar rifas");
            }
        }
    }
    private async Task PreloadFeaturedImages()
    {
        if (!_isRendered || _featuredRifas == null || !_featuredRifas.Any())
            return;

        try
        {
            // Pré-carregar apenas as 3 primeiras para otimizar
            foreach (var rifa in _featuredRifas.Take(3))
            {
                if (_logger != null)
                {
                    await _logger.LogAsync($"Precarregando imagem: {GetRifaImage(rifa)}", LogLevel.Debug);
                }
                
                try
                {
                    await JSRuntime.InvokeVoidAsync("preloadImage", GetRifaImage(rifa));
                }
                catch (Exception)
                {
                    // Ignoramos erros de pré-carregamento
                }
            }
        }
        catch (Exception ex)
        {
            if (_logger != null)
            {
                await _logger.LogExceptionAsync(ex, "Erro ao pré-carregar imagens");
            }
        }
    }

    private async Task PreloadImage(string imageUrl)
    {
        // Pré-carregamento de imagens para melhorar a experiência do usuário
        try
        {
            await JSRuntime.InvokeVoidAsync("preloadImage", imageUrl);
        }
        catch (Exception ex)
        {
            await _logger.LogAsync($"Erro ao pré-carregar imagem: {imageUrl}", LogLevel.Warning);
            await _logger.LogExceptionAsync(ex, "Detalhes do erro de pré-carregamento");
        }
    }

    private string GetRifaImage(RifaDTO rifa)
    {
        return string.IsNullOrEmpty(rifa.Base64Img)
            ? "/images/default-rifa.jpg"
            : $"data:image/png;base64,{rifa.Base64Img}";
    }

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"));
    }

    private Color GetProgressColor(RifaDTO rifa)
    {
        double percentage = GetProgressPercentage(rifa);

        if (percentage < 30) return Color.Success;
        if (percentage < 70) return Color.Warning;
        return Color.Error;
    }

    private double GetProgressPercentage(RifaDTO rifa)
    {
        if (rifa.MaxTickets <= 0) return 0;

        int ticketsSold = rifa.Tickets?.Count ?? 0;
        return (double)ticketsSold * 100 / rifa.MaxTickets;
    }

    private string GetTimeRemaining(DateTime drawDateTime)
    {
        var timeSpan = drawDateTime - DateTime.UtcNow;

        if (timeSpan.TotalDays < 0)
            return "Sorteio encerrado";

        if (timeSpan.TotalDays > 1)
            return $"{Math.Floor(timeSpan.TotalDays)} dias {timeSpan.Hours}h {timeSpan.Minutes}min";

        return $"{timeSpan.Hours}h {timeSpan.Minutes}min {timeSpan.Seconds}s";
    }

    private string GetShortTimeRemaining(DateTime drawDateTime)
    {
        var timeSpan = drawDateTime - DateTime.UtcNow;

        if (timeSpan.TotalDays < 0)
            return "Encerrado";

        if (timeSpan.TotalDays > 7)
            return $"{Math.Floor(timeSpan.TotalDays)} dias";

        if (timeSpan.TotalDays > 1)
            return $"{Math.Floor(timeSpan.TotalDays)}d {timeSpan.Hours}h";

        if (timeSpan.TotalHours > 1)
            return $"{Math.Floor(timeSpan.TotalHours)}h {timeSpan.Minutes}m";

        return $"{timeSpan.Minutes}min";
    }

    private void NavigateToRifa(Guid rifaId)
    {
        try
        {
            _logger.LogAsync($"Navegando para rifa: {rifaId}", LogLevel.Info).ConfigureAwait(false);
            Navigation.NavigateTo($"/rifas/{rifaId}");
        }
        catch (Exception ex)
        {
            _logger.LogExceptionAsync(ex, "Erro ao navegar para rifa").ConfigureAwait(false);
        }
    }

    private void NavigateToComprar(Guid rifaId)
    {
        try
        {
            _logger.LogAsync($"Navegando para compra: {rifaId}", LogLevel.Info).ConfigureAwait(false);
            Navigation.NavigateTo($"/rifas/{rifaId}/comprar");
        }
        catch (Exception ex)
        {
            _logger.LogExceptionAsync(ex, "Erro ao navegar para compra").ConfigureAwait(false);
        }
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }
}