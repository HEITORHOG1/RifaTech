@page "/admin/dashboard"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging
@using RifaTech.DTOs.DTOs.AdminDashboard
@using MudBlazor
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject ILogger<AdminDashboard> Logger
@inject IDialogService DialogService

<PageTitle>Painel Administrativo - RifaTech</PageTitle>

<!-- Cabeçalho da página -->
<MudText Typo="Typo.h4" Class="mb-4">
    <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mr-2" />
    Painel Administrativo
</MudText>

<!-- Loading State -->
@if (_loading)
{
    <MudContainer Class="d-flex flex-column align-center justify-center my-8">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        <MudText Typo="Typo.body1" Class="mt-4">Carregando dados do dashboard...</MudText>
    </MudContainer>

}
@code {
    private bool _loading = true;
    private AdminDashboardStatsDTO _stats;
    private List<RecentTicketSaleDTO> _recentSales;
    private List<UpcomingDrawDTO> _upcomingDraws;
    private List<TopSellingRifaDTO> _topRifas;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Inicializando dashboard administrativo");
        await LoadDashboardStats();
    }

    private async Task LoadDashboardStats()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            Logger.LogInformation("Carregando estatísticas do dashboard");
            
            // Carregar estatísticas gerais
            _stats = await Http.GetFromJsonAsync<AdminDashboardStatsDTO>("api/admin/dashboard/stats");
            
            // Carregar vendas recentes
            _recentSales = await Http.GetFromJsonAsync<List<RecentTicketSaleDTO>>("api/admin/tickets/recent-sales?count=5");
            
            // Carregar próximos sorteios
            _upcomingDraws = await Http.GetFromJsonAsync<List<UpcomingDrawDTO>>("api/admin/draws/upcoming?count=5");
            
            // Carregar rifas mais vendidas
            _topRifas = await Http.GetFromJsonAsync<List<TopSellingRifaDTO>>("api/admin/rifas/top-selling?count=5");
            
            Logger.LogInformation("Estatísticas do dashboard carregadas com sucesso");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao carregar estatísticas do dashboard");
            Snackbar.Add("Erro ao carregar dados do dashboard. Tente novamente mais tarde.", Severity.Error);
            _stats = null;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task ShowDeleteDialog(TopSellingRifaDTO rifa)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Tem certeza que deseja excluir a rifa '{rifa.Name}'? Esta ação não pode ser desfeita." },
            { "ButtonText", "Excluir" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogReference = DialogService.Show<ConfirmDialog>("Confirmar Exclusão", parameters, options);
        var result = await dialogReference.Result;

        if (!result.Canceled)
        {
            try
            {
                var response = await Http.DeleteAsync($"api/rifas/{rifa.Id}");
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Rifa excluída com sucesso!", Severity.Success);
                    // Recarregar dados
                    await LoadDashboardStats();
                }
                else
                {
                    Snackbar.Add("Erro ao excluir rifa.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, $"Erro ao excluir rifa {rifa.Id}");
                Snackbar.Add("Erro ao excluir rifa. Tente novamente mais tarde.", Severity.Error);
            }
        }
    }

    private string GetNameInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "?";

        var parts = name.Split(' ');
        if (parts.Length > 1)
        {
            // Check each part length before accessing index
            if (parts[0].Length > 0 && parts[1].Length > 0)
                return $"{parts[0][0]}{parts[1][0]}";
            else if (parts[0].Length > 0)
                return parts[0][0].ToString();
            else
                return "?";
        }

        // Check if the first part has any characters
        return parts[0].Length > 0 ? parts[0][0].ToString() : "?";
    }

    private Color GetProgressColor(decimal percentage)
    {
        if (percentage < 30m) return Color.Success;
        if (percentage < 70m) return Color.Warning;
        return Color.Error;
    }

    private string FormatCurrency(decimal value)
    {
        return value.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"));
    }

    private string FormatDate(DateTime date)
    {
        return date.ToString("dd/MM/yyyy");
    }

    private string FormatDateTime(DateTime date)
    {
        return date.ToString("dd/MM/yyyy HH:mm");
    }
}
else if (_stats == null)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-4">
        Erro ao carregar estatísticas do dashboard.
        <MudButton Variant="Variant.Text" Color="Color.Inherit" OnClick="LoadDashboardStats" Class="ml-auto">
            Tentar Novamente
        </MudButton>
    </MudAlert>
}
else
{
    <!-- Cards de Estatísticas -->
    <MudGrid Class="mb-6">
        <!-- Total de Rifas -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4 d-flex flex-column h-100">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Total de Rifas</MudText>
                <MudText Typo="Typo.h4" Color="Color.Primary">@_stats.TotalRifas</MudText>
                <MudText Typo="Typo.caption" Class="mt-auto">
                    <MudIcon Icon="@Icons.Material.Filled.CardGiftcard" Size="Size.Small" />
                    @_stats.ActiveRifas ativos
                </MudText>
            </MudPaper>
        </MudItem>

        <!-- Total de Tickets -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4 d-flex flex-column h-100">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Total de Tickets</MudText>
                <MudText Typo="Typo.h4" Color="Color.Secondary">@_stats.TotalTickets</MudText>
                <MudText Typo="Typo.caption" Class="mt-auto">
                    <MudIcon Icon="@Icons.Material.Filled.ConfirmationNumber" Size="Size.Small" />
                    @_stats.TodaySales vendidos hoje
                </MudText>
            </MudPaper>
        </MudItem>

        <!-- Total de Clientes -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4 d-flex flex-column h-100">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Total de Clientes</MudText>
                <MudText Typo="Typo.h4" Color="Color.Info">@_stats.TotalClientes</MudText>
                <MudText Typo="Typo.caption" Class="mt-auto">
                    <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Small" />
                    Taxa de conversão: @_stats.ConversionRate.ToString("0.0")%
                </MudText>
            </MudPaper>
        </MudItem>

        <!-- Receita Mensal -->
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Elevation="2" Class="pa-4 d-flex flex-column h-100">
                <MudText Typo="Typo.subtitle1" Class="mb-2">Receita Mensal</MudText>
                <MudText Typo="Typo.h4" Color="Color.Success">@FormatCurrency(_stats.MonthRevenue)</MudText>
                <MudText Typo="Typo.caption" Class="mt-auto">
                    <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Size="Size.Small" />
                    @FormatCurrency(_stats.TodayRevenue) hoje
                </MudText>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid>
        <!-- Vendas Recentes -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="1" Class="pa-4">
                <div class="d-flex align-center mb-4">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.List" Class="mr-2" />
                        Vendas Recentes
                    </MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.ChevronRight"
                              OnClick="@(() => Navigation.NavigateTo("/admin/vendas"))">
                        Ver Todas
                    </MudButton>
                </div>

                @if (_recentSales == null || !_recentSales.Any())
                {
                    <MudAlert Severity="Severity.Info">Nenhuma venda recente encontrada.</MudAlert>
                }
                else
                {
                <MudList Clickable="true" T="RecentTicketSaleDTO">
                        @foreach (var sale in _recentSales)
                        {
                            <MudListItem OnClick="@(() => Navigation.NavigateTo($"/admin/tickets/{sale.TicketId}"))">
                                <div class="d-flex align-center">
                                    <MudAvatar Color="Color.Secondary" Size="Size.Small" 
                                              Class="mr-3">@GetNameInitials(sale.ClienteName)</MudAvatar>
                                    <div>
                                        <MudText Typo="Typo.body1">@sale.ClienteName</MudText>
                                        <MudText Typo="Typo.caption">
                                            Rifa: @sale.RifaName | Número: @sale.TicketNumber
                                        </MudText>
                                    </div>
                                    <MudSpacer />
                                    <div class="d-flex flex-column align-end">
                                        <MudText Typo="Typo.body2" Color="Color.Success">
                                            @FormatCurrency(sale.TicketPrice)
                                        </MudText>
                                        <MudText Typo="Typo.caption">
                                            @FormatDateTime(sale.PurchaseTime)
                                        </MudText>
                                    </div>
                                </div>
                            </MudListItem>
                            <MudDivider />
                        }
                    </MudList>
                }
            </MudPaper>
        </MudItem>

        <!-- Próximos Sorteios -->
        <MudItem xs="12" md="6">
            <MudPaper Elevation="1" Class="pa-4">
                <div class="d-flex align-center mb-4">
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Event" Class="mr-2" />
                        Próximos Sorteios
                    </MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.ChevronRight"
                              OnClick="@(() => Navigation.NavigateTo("/admin/sorteios"))">
                        Ver Todos
                    </MudButton>
                </div>

                @if (_upcomingDraws == null || !_upcomingDraws.Any())
                {
                    <MudAlert Severity="Severity.Info">Nenhum sorteio próximo encontrado.</MudAlert>
                }
                else
                {
                    <MudTable Items="_upcomingDraws" Hover="true" Breakpoint="Breakpoint.Sm">
                        <HeaderContent>
                            <MudTh>Rifa</MudTh>
                            <MudTh>Data</MudTh>
                            <MudTh>Tickets</MudTh>
                            <MudTh>Progresso</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Rifa">
                                <MudLink Href="@($"/admin/rifas/{context.Id}")">@context.Name</MudLink>
                            </MudTd>
                            <MudTd DataLabel="Data">
                                <div class="d-flex flex-column">
                                    <MudText Typo="Typo.caption">@FormatDateTime(context.DrawDateTime)</MudText>
                                <MudChip T="string" Size="Size.Small" Color="Color.Warning">
                                    @context.TimeRemaining
                                </MudChip>

                                </div>
                            </MudTd>
                            <MudTd DataLabel="Tickets">
                                @context.TicketsSold / @context.MaxTickets
                            </MudTd>
                            <MudTd DataLabel="Progresso">
                                <MudProgressLinear Value="@((double)context.PercentageSold)" 
                                                  Color="@GetProgressColor(context.PercentageSold)" 
                                                  Class="my-1" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Rifas Mais Vendidas -->
    <MudPaper Elevation="1" Class="pa-4 mt-6">
        <div class="d-flex align-center mb-4">
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Star" Class="mr-2" />
                Rifas Mais Vendidas
            </MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.ChevronRight"
                       OnClick="@(() => Navigation.NavigateTo("/admin/rifas"))">
                Ver Todas
            </MudButton>
        </div>

        @if (_topRifas == null || !_topRifas.Any())
        {
            <MudAlert Severity="Severity.Info">Nenhuma rifa encontrada.</MudAlert>
        }
        else
        {
            <MudTable Items="_topRifas" Hover="true" Breakpoint="Breakpoint.Md" T="TopSellingRifaDTO">
                <HeaderContent>
                    <MudTh>Rifa</MudTh>
                    <MudTh>Data do Sorteio</MudTh>
                    <MudTh>Tickets Vendidos</MudTh>
                    <MudTh>Receita</MudTh>
                    <MudTh>Progresso</MudTh>
                    <MudTh>Ações</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Rifa">
                        <MudLink Href="@($"/admin/rifas/{context.Id}")">@context.Name</MudLink>
                    </MudTd>
                    <MudTd DataLabel="Data do Sorteio">@FormatDate(context.DrawDateTime)</MudTd>
                    <MudTd DataLabel="Tickets Vendidos">@context.TicketsSold</MudTd>
                    <MudTd DataLabel="Receita">@FormatCurrency(context.TotalRevenue)</MudTd>
                    <MudTd DataLabel="Progresso">
                        <div class="d-flex align-center">
                            <MudProgressLinear Value="@((double)context.PercentageSold)" 
                                              Color="@GetProgressColor(context.PercentageSold)" 
                                              Class="flex-grow-1 mr-2" />
                            <MudText Typo="Typo.caption">@context.PercentageSold.ToString("0.0")%</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="Ações">
                        <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                          OnClick="@(() => Navigation.NavigateTo($"/admin/rifas/{context.Id}/editar"))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                          OnClick="@(() => ShowDeleteDialog(context))" />
                        </MudButtonGroup>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
    </MudPaper>
    
    <!-- Última atualização -->
    <MudText Typo="Typo.caption" Class="mt-4 d-flex justify-end">
        Última atualização: @FormatDateTime(_stats.LastUpdated)
    </MudText>
}
}