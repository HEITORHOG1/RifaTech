@page "/rifas/{Id:guid}/comprar"
@using System.Net.Http.Json
@using RifaTech.DTOs.DTOs
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Comprar Tickets - RifaTech</PageTitle>

@if (_loading)
{
    <div class="d-flex justify-center my-8">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
    </div>
}
else if (_rifa == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Rifa não encontrada.</MudAlert>
}
else
{
    <MudPaper Class="pa-4 mb-6">
        <MudGrid>
            <MudItem xs="12" md="6">
                <MudImage Src="@(string.IsNullOrEmpty(_rifa.Base64Img) ? "/images/default-rifa.jpg" : $"data:image/png;base64,{_rifa.Base64Img}")"
                         Width="100%" Height="200px" ObjectFit="ObjectFit.Cover"
                         Elevation="2" Class="rounded-lg" />
            </MudItem>
            
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h5">@_rifa.Name</MudText>
                <MudText Typo="Typo.body2" Class="mb-2">@_rifa.Description</MudText>
                
                <MudDivider Class="my-2" />
                
                <MudGrid>
                    <MudItem xs="6">
                        <MudText Typo="Typo.subtitle2">Preço do Ticket</MudText>
                        <MudText Typo="Typo.h6" Color="Color.Primary">
                            @_rifa.TicketPrice.ToString("C")
                        </MudText>
                    </MudItem>
                    
                    <MudItem xs="6">
                        <MudText Typo="Typo.subtitle2">Data do Sorteio</MudText>
                        <MudText Typo="Typo.body1">
                            @_rifa.DrawDateTime.ToString("dd/MM/yyyy HH:mm")
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <MudText Typo="Typo.h5" Class="mb-4">Formulário de Compra</MudText>
    
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="1. Quantidade" Icon="@Icons.Material.Filled.Numbers">
            <MudText Typo="Typo.h6" Class="mb-4">Selecione a quantidade de tickets</MudText>

            <MudTextField T="string"
                          Label="Email"
                          Variant="Variant.Outlined"
                          @bind-Value="@_loginModel.Email"
                          For="@(() => _loginModel.Email)"
                          Immediate="true"
                          Required="true"
                          RequiredError="Email é obrigatório"
                          Class="mb-4" />
            <MudSlider @bind-Value="_quantidade" Min="1" Max="50" 
                     Color="Color.Primary" 
                     ValueLabel="true" Class="py-4 mb-4" />
            
            <MudDivider Class="my-4" />
            
            <MudText Typo="Typo.subtitle1" Class="mb-2">Resumo da Compra</MudText>
            <MudPaper Elevation="0" Class="pa-4 mud-background-gray rounded-lg">
                <MudGrid>
                    <MudItem xs="8">
                        <MudText>@_quantidade x Ticket(s) a @_rifa.TicketPrice.ToString("C")</MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                        <MudText>@((_quantidade * _rifa.TicketPrice).ToString("C"))</MudText>
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudDivider Class="my-2" />
                    </MudItem>
                    
                    <MudItem xs="8">
                        <MudText Typo="Typo.subtitle1"><strong>Total</strong></MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                            <strong>@((_quantidade * _rifa.TicketPrice).ToString("C"))</strong>
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
            
            <div class="d-flex justify-end mt-6">
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Primary" 
                         OnClick="@(() => _activeIndex = 1)"
                         Disabled="_quantidade < 1">
                    Continuar
                </MudButton>
            </div>
        </MudTabPanel>
        
        <MudTabPanel Text="2. Dados" Icon="@Icons.Material.Filled.Person">
            <MudText Typo="Typo.h6" Class="mb-4">Informações de Contato</MudText>
            
            <EditForm Model="_cliente" OnValidSubmit="@(() => _activeIndex = 2)">
                <DataAnnotationsValidator />
                
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField T="string"
                                    @bind-Value="_cliente.Name"
                                    Label="Nome Completo"
                                    Variant="Variant.Outlined"
                                    Required="true" />
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudTextField T="string"
                                    @bind-Value="_cliente.Email"
                                    Label="Email"
                                    Variant="Variant.Outlined"
                                    Required="true" />
                    </MudItem>
                    
                    <MudItem xs="12" md="6">
                        <MudTextField T="string"
                                    @bind-Value="_cliente.PhoneNumber"
                                    Label="Telefone"
                                    Variant="Variant.Outlined"
                                    Required="true" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField T="string"
                                    @bind-Value="_cliente.CPF"
                                    Label="CPF"
                                    Variant="Variant.Outlined"
                                    Required="true" />
                    </MudItem>
                </MudGrid>
                
                <div class="d-flex justify-space-between mt-6">
                    <MudButton Variant="Variant.Outlined" 
                             Color="Color.Primary"
                             OnClick="@(() => _activeIndex = 0)">
                        Voltar
                    </MudButton>
                    
                    <MudButton ButtonType="ButtonType.Submit" 
                             Variant="Variant.Filled" 
                             Color="Color.Primary">
                        Continuar
                    </MudButton>
                </div>
            </EditForm>
        </MudTabPanel>
        
        <MudTabPanel Text="3. Pagamento" Icon="@Icons.Material.Filled.Payment">
            <MudText Typo="Typo.h6" Class="mb-4">Métodos de Pagamento</MudText>
            
            <MudPaper Elevation="0" Class="pa-4 mud-background-gray rounded-lg mb-4">
                <MudGrid>
                    <MudItem xs="8">
                        <MudText Typo="Typo.subtitle1"><strong>Total a Pagar</strong></MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">
                            <strong>@((_quantidade * _rifa.TicketPrice).ToString("C"))</strong>
                        </MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudRadioGroup T="string" @bind-Value="@_paymentMethod" Class="mb-4">
                <MudRadio T="string" Value="@("pix")" Color="Color.Primary" Class="mb-2">
                    <div class="d-flex align-center">
                        <MudImage Src="/images/pix-logo.png" Height="24" Width="24" Class="mr-2" />
                        <div>
                            <MudText>PIX</MudText>
                            <MudText Typo="Typo.caption">Pagamento instantâneo</MudText>
                        </div>
                    </div>
                </MudRadio>
            </MudRadioGroup>

            <MudCheckBox T="bool" @bind-Checked="@_termsAccepted"
                         Label="Li e concordo com os termos e condições"
                         Color="Color.Primary"
                         Class="mb-4" />
            
            <div class="d-flex justify-space-between mt-6">
                <MudButton Variant="Variant.Outlined" 
                         Color="Color.Primary"
                         OnClick="@(() => _activeIndex = 1)">
                    Voltar
                </MudButton>
                
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Primary"
                         OnClick="FinalizarCompra"
                         Disabled="@(!_termsAccepted || _processando)">
                    @if (_processando)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processando</MudText>
                    }
                    else
                    {
                        <MudText>Finalizar Compra</MudText>
                    }
                </MudButton>
            </div>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    
    private RifaDTO _rifa;
    private int _quantidade = 1;
    private int _activeIndex = 0;
    private bool _loading = true;
    private bool _termsAccepted = false;
    private bool _processando = false;
    private string _paymentMethod = "pix";
    
    private ClienteDTO _cliente = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadRifa();
        await LoadUserData();
    }
    
    private async Task LoadRifa()
    {
        try
        {
            _loading = true;
            _rifa = await Http.GetFromJsonAsync<RifaDTO>($"api/rifas/{Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar detalhes da rifa: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task LoadUserData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                try
                {
                    var userInfo = await Http.GetFromJsonAsync<UserInfoDTO>($"api/manage/info");
                    if (userInfo != null)
                    {
                        _cliente.Email = userInfo.Email;
                        _cliente.Name = userInfo.Name;
                    }
                }
                catch (Exception) { /* Ignora erro se não conseguir carregar dados do usuário */ }
            }
        }
    }
    
    private async Task FinalizarCompra()
    {
        if (!_termsAccepted)
        {
            Snackbar.Add("Você precisa aceitar os termos e condições para continuar.", Severity.Warning);
            return;
        }
        
        _processando = true;
        
        try
        {
            // Verificar se cliente já existe pelo email, telefone ou CPF
            var existingCliente = await Http.GetFromJsonAsync<ClienteDTO>($"api/clientes/{_cliente.Email}/{_cliente.PhoneNumber}/{_cliente.CPF}");
            
            if (existingCliente == null)
            {
                // Criar novo cliente
                var response = await Http.PostAsJsonAsync("api/clientes", _cliente);
                if (response.IsSuccessStatusCode)
                {
                    _cliente = await response.Content.ReadFromJsonAsync<ClienteDTO>();
                }
                else
                {
                    throw new Exception("Erro ao cadastrar cliente.");
                }
            }
            else
            {
                _cliente = existingCliente;
            }
            
            // Criar pagamento PIX
            var pixRequest = new PixPaymentRequest
            {
                RifaId = _rifa,
                Quantidade = _quantidade,
                ValorTotal = _quantidade * (decimal)_rifa.TicketPrice,
                ClienteId = _cliente
            };
            
            var paymentResponse = await Http.PostAsJsonAsync("api/payments/pix", pixRequest);
            
            if (paymentResponse.IsSuccessStatusCode)
            {
                var payment = await paymentResponse.Content.ReadFromJsonAsync<PaymentDTO>();
                
                // Mostrar diálogo com QR Code para pagamento
                var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
                var parameters = new DialogParameters
                {
                    { "Payment", payment },
                    { "RifaId", Id },
                    { "Amount", _quantidade * (decimal)_rifa.TicketPrice }
                };
                
                await DialogService.ShowAsync<PixPaymentDialog>("Pagamento PIX", parameters, options);
            }
            else
            {
                throw new Exception("Erro ao gerar pagamento PIX.");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro: {ex.Message}", Severity.Error);
        }
        finally
        {
            _processando = false;
        }
    }
}