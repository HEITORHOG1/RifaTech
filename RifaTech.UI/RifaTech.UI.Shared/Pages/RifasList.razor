@page "/rifas"
@using System.Net.Http.Json
@using RifaTech.DTOs.DTOs
@inject HttpClient Http
@inject ISnackbar Snackbar

<PageTitle>Rifas Disponíveis - RifaTech</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Rifas Disponíveis</MudText>

    <MudPaper Elevation="3" Class="pa-4 mb-6">
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudTextField T="string"
                              @bind-Value="_searchTerm"
                              Label="Buscar rifa"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              OnAdornmentClick="ApplyFilters"
                              OnKeyUp="@(e => { if (e.Key == "Enter") ApplyFilters(); })" />
            </MudItem>

            <MudItem xs="12" md="3">
                <MudDatePicker Label="Data Inicial"
                               @bind-Date="_startDate"
                               Variant="Variant.Outlined" />
            </MudItem>

            <MudItem xs="12" md="3">
                <MudDatePicker Label="Data Final"
                               @bind-Date="_endDate"
                               Variant="Variant.Outlined" />
            </MudItem>

            <MudItem xs="12" md="2" Class="d-flex align-center">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="ApplyFilters"
                           Class="ml-auto">
                    Filtrar
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (_loading)
    {
        <div class="d-flex justify-center my-8">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (_rifas == null || !_rifas.Any())
    {
        <MudAlert Severity="Severity.Info" Class="my-4">Nenhuma rifa encontrada.</MudAlert>
    }
    else
    {
        <MudGrid>
            @foreach (var rifa in _rifas)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <RifaCard Rifa="rifa" />
                </MudItem>
            }
        </MudGrid>

        <MudPagination Count="@_totalPages"
                       SelectedChanged="PageChanged"
                       Class="mt-4 d-flex justify-center" />
    }
</MudContainer>

@code {
    private List<RifaDTO> _rifas;
    private bool _loading = true;
    private string _searchTerm = "";
    private DateTime? _startDate = null;
    private DateTime? _endDate = null;
    private int _currentPage = 1;
    private int _pageSize = 12;
    private int _totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadRifas();
    }

    private async Task LoadRifas()
    {
        try
        {
            _loading = true;

            var response = await Http.GetFromJsonAsync<PaginatedResult<RifaDTO>>(
                $"api/rifas/paginated?pageNumber={_currentPage}&pageSize={_pageSize}" +
                $"&searchTerm={Uri.EscapeDataString(_searchTerm)}" +
                $"&startDate={(_startDate.HasValue ? _startDate.Value.ToString("yyyy-MM-dd") : "")}" +
                $"&endDate={(_endDate.HasValue ? _endDate.Value.ToString("yyyy-MM-dd") : "")}"
            );

            if (response != null)
            {
                _rifas = response.Items.ToList();
                _totalPages = (int)Math.Ceiling(response.TotalCount / (double)_pageSize);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar rifas: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task PageChanged(int page)
    {
        _currentPage = page;
        await LoadRifas();
    }

    private async Task ApplyFilters()
    {
        _currentPage = 1;
        await LoadRifas();
    }

    public class PaginatedResult<T>
    {
        public IEnumerable<T> Items { get; set; }
        public int TotalCount { get; set; }
    }
}
