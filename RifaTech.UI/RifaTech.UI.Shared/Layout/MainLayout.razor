@* MainLayout.razor *@
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Extensions.Logging
@using MudBlazor
@using RifaTech.UI.Shared.Services
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IStorageService LocalStorage

@inject ILogger<MainLayout> Logger

<MudThemeProvider Theme="@_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="1" Color="@(_isAdmin ? Color.Error : Color.Primary)" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       Size="Size.Small"
                       OnClick="@ToggleDrawer" />

        <MudText Typo="Typo.h6" Class="ml-2">
            <MudIcon Icon="@Icons.Material.Filled.Casino" Size="Size.Small" Class="mr-1" />
            RifaTech @(_isAdmin ? "(Área Administrativa)" : "")
        </MudText>

        <MudSpacer />

        @if (_isAuthenticated)
        {
            <MudTooltip Text="Notificações">
                <MudBadge Color="Color.Error" Content="@_notificationCount" Size="Size.Small" Overlap>
                    <MudIconButton Icon="@Icons.Material.Filled.Notifications"
                                   Size="Size.Small"
                                   Color="Color.Inherit"
                                   OnClick="OpenNotifications" />
                </MudBadge>
            </MudTooltip>
        }

        <MudTooltip Text="@(_isDarkMode ? "Modo Claro" : "Modo Escuro")">
            <MudIconButton Icon="@(_isDarkMode? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                           Size="Size.Small"
                           Color="Color.Inherit"
                           OnClick="@ToggleTheme" />
        </MudTooltip>

        @if (_isAuthenticated)
        {
            <MudMenu Direction="Direction.Bottom" OffsetY="true" Dense="true">
                <ActivatorContent>
                    <MudAvatar Color="@(_isAdmin ? Color.Error : Color.Secondary)" Size="Size.Small" Class="ml-2">@_userInitials</MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudText Typo="Typo.caption" Class="px-4 py-2">
                        <b>@_userName</b>
                        @if (_isAdmin)
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Error" Class="ml-2">Admin</MudChip>

                        }
                    </MudText>
                    <MudDivider />
                    <MudMenuItem Icon="@Icons.Material.Filled.Person" OnClick="@(() => Navigation.NavigateTo("/perfil"))">Perfil</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.Settings" OnClick="@(() => Navigation.NavigateTo("/configuracoes"))">Configurações</MudMenuItem>
                    @if (_isAdmin)
                    {
                        <MudMenuItem Icon="@Icons.Material.Filled.Dashboard" OnClick="@(() => Navigation.NavigateTo("/admin/dashboard"))">Painel Admin</MudMenuItem>
                    }
                    <MudDivider />
                    <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="@(() => Navigation.NavigateTo("/logout"))">Sair</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
        else
        {
            <MudButton Variant="Variant.Text"
                       Size="Size.Small"
                       Color="Color.Inherit"
                       StartIcon="@Icons.Material.Filled.Login"
                       OnClick="@(() => Navigation.NavigateTo("/login"))">
                Entrar
            </MudButton>
        }
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen"
               ClipMode="DrawerClipMode.Always"
               Elevation="1"
               Variant="@DrawerVariant.Mini"
               OpenMiniOnHover="true"
               @bind-MiniDrawer="_miniDrawer">
        <MudDrawerHeader>
            <MudText Typo="Typo.subtitle1" Class="mt-1">RifaTech</MudText>
        </MudDrawerHeader>
        <NavMenu IsAdmin="@_isAdmin" />
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _miniDrawer = true;
    private bool _isDarkMode = false;
    private bool _isAuthenticated = false;
    private bool _isAdmin = false;
    private int _notificationCount = 0;
    private string _userInitials = "U";
    private string _userName = "Usuário";
    private MudTheme _currentTheme = new MudTheme();

    protected override async Task OnInitializedAsync()
    {
        SetupTheme();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Agora é seguro acessar o localStorage
            var savedTheme = await LocalStorage.GetItemAsync<string>("themeMode");
            if (!string.IsNullOrEmpty(savedTheme) && savedTheme == "dark")
            {
                _isDarkMode = true;
                SetupTheme();
                StateHasChanged();
            }

            // Inicializar estado de autenticação após a renderização
            if (AuthStateProvider is CustomAuthStateProvider customAuth)
            {
                await customAuth.InitializeAuthenticationStateAsync();
                await CheckAuthenticationState();
            }
            else
            {
                await CheckAuthenticationState();
            }

            // Podemos fazer verificações adicionais após a renderização
            if (_isAuthenticated && _isAdmin)
            {
                Logger.LogInformation("Layout renderizado para usuário administrador");
            }
        }
    }
    private async Task CheckAuthenticationState()
    {
        try
        {
            Logger.LogInformation("Verificando estado de autenticação no layout");

            // Força uma atualização completa do estado de autenticação
            if (AuthStateProvider is CustomAuthStateProvider customAuth)
            {
                await customAuth.InitializeAuthenticationStateAsync();
            }

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            _isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

            if (_isAuthenticated)
            {
                // Verifica se é admin pela claim de role
                _isAdmin = authState.User.IsInRole("Admin");
                Logger.LogInformation($"Usuário autenticado. IsAdmin por claim: {_isAdmin}");

                // Backup: verifica também pelos dados salvos no localStorage
                try
                {
                    var savedIsAdmin = await LocalStorage.GetItemAsync<bool>("isAdmin");
                    if (!_isAdmin && savedIsAdmin)
                    {
                        _isAdmin = true;
                        Logger.LogInformation("IsAdmin atualizado pelo localStorage");
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogWarning($"Erro ao verificar isAdmin no localStorage: {ex.Message}");
                }

                // Obter nome do usuário
                var name = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value ?? "";
                _userName = name;
                _userInitials = string.IsNullOrEmpty(name)
                    ? "U"
                    : string.Join("", name.Split(' ').Take(2).Select(n => n.Length > 0 ? n[0].ToString() : ""));

                // Tenta obter o email como fallback para o nome
                if (string.IsNullOrEmpty(_userName))
                {
                    _userName = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "Usuário";
                }

                // Carregar notificações
                await LoadNotifications();

                Logger.LogInformation($"Layout configurado para usuário: {_userName}, IsAdmin: {_isAdmin}");
            }
            else
            {
                Logger.LogInformation("Usuário não autenticado");
                _isAdmin = false;
                _userName = "Usuário";
                _userInitials = "U";
                _notificationCount = 0;
            }

            // Atualizar o tema após verificar o status de admin
            SetupTheme();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erro ao verificar estado de autenticação");
            _isAuthenticated = false;
            _isAdmin = false;
            _userName = "Usuário";
            _userInitials = "U";
            _notificationCount = 0;
            StateHasChanged();
        }
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        SetupTheme();
    }

    private void SetupTheme()
    {
        if (_isDarkMode)
        {
            _currentTheme = new MudTheme
            {
                PaletteDark = new PaletteDark
                {
                    Primary = "#90CAF9",
                    Secondary = "#F48FB1",
                    AppbarBackground = "#1A1A27",
                    Background = "#121212",
                    Surface = "#1E1E1E",
                    DrawerBackground = "#1A1A27",
                    DrawerText = "rgba(255,255,255,0.87)",
                    TextPrimary = "rgba(255,255,255,0.87)"
                },
                LayoutProperties = new LayoutProperties
                {
                    DrawerWidthLeft = "240px",
                    DrawerMiniWidthLeft = "56px"
                }
            };
        }
        else
        {
            _currentTheme = new MudTheme
            {
                PaletteLight = new PaletteLight
                {
                    Primary = "#1E88E5",
                    Secondary = "#FF4081",
                    AppbarBackground = "#1E88E5",
                    Background = "#F5F5F5",
                    Surface = "#FFFFFF",
                    DrawerBackground = "#FFFFFF",
                    DrawerText = "rgba(0,0,0,0.87)",
                    TextPrimary = "rgba(0,0,0,0.87)"
                },
                LayoutProperties = new LayoutProperties
                {
                    DrawerWidthLeft = "240px",
                    DrawerMiniWidthLeft = "56px"
                }
            };
        }
    }

    private async Task LoadNotifications()
    {
        // Simulação de carregamento de notificações
        _notificationCount = 3;
    }

    private void OpenNotifications()
    {
        Navigation.NavigateTo("/notificacoes");
    }

    private async Task Logout()
    {
        // Lógica de logout
        Snackbar.Add("Logout realizado com sucesso", Severity.Success);
        Navigation.NavigateTo("/");
    }
}