@* MainLayout.razor *@
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<MudThemeProvider Theme="@_currentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider /> <!-- Adicione esta linha -->

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary" Dense="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                       Color="Color.Inherit"
                       Edge="Edge.Start"
                       Size="Size.Small"
                       OnClick="@ToggleDrawer" />

        <MudText Typo="Typo.h6" Class="ml-2">
            <MudIcon Icon="@Icons.Material.Filled.Casino" Size="Size.Small" Class="mr-1" />
            RifaTech
        </MudText>

        <MudSpacer />

        @if (_isAuthenticated)
        {
            <MudTooltip Text="Notificações">
                <MudBadge Color="Color.Error" Content="@_notificationCount" Size="Size.Small" Overlap>
                    <MudIconButton Icon="@Icons.Material.Filled.Notifications"
                                   Size="Size.Small"
                                   Color="Color.Inherit"
                                   OnClick="OpenNotifications" />
                </MudBadge>
            </MudTooltip>
        }

        <MudTooltip Text="@(_isDarkMode ? "Modo Claro" : "Modo Escuro")">
            <MudIconButton Icon="@(_isDarkMode? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                           Size="Size.Small"
                           Color="Color.Inherit"
                           OnClick="@ToggleTheme" />
        </MudTooltip>

        @if (_isAuthenticated)
        {
            <MudMenu Direction="Direction.Bottom" OffsetY="true" Dense="true">
                <ActivatorContent>
                    <MudAvatar Color="Color.Secondary" Size="Size.Small" Class="ml-2">@_userInitials</MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Icon="@Icons.Material.Filled.Person">Perfil</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.Settings">Configurações</MudMenuItem>
                    <MudDivider />
                    <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="Logout">Sair</MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
        else
        {
            <MudButton Variant="Variant.Text"
                       Size="Size.Small"
                       Color="Color.Inherit"
                       StartIcon="@Icons.Material.Filled.Login"
                       OnClick="@(() => Navigation.NavigateTo("/login"))">
                Entrar
            </MudButton>
        }
    </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen"
               ClipMode="DrawerClipMode.Always"
               Elevation="1"
               Variant="@DrawerVariant.Mini"
               OpenMiniOnHover="true"
               @bind-MiniDrawer="_miniDrawer">
        <MudDrawerHeader>
            <MudText Typo="Typo.subtitle1" Class="mt-1">RifaTech</MudText>
        </MudDrawerHeader>
        <NavMenu IsAdmin="@_isAdmin" />
    </MudDrawer>

    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _miniDrawer = true;
    private bool _isDarkMode = false;
    private bool _isAuthenticated = false;
    private bool _isAdmin = false;
    private int _notificationCount = 0;
    private string _userInitials = "U";
    private MudTheme _currentTheme = new MudTheme();

    protected override async Task OnInitializedAsync()
    {
        SetupTheme();
        await CheckAuthenticationState();
    }

    private async Task CheckAuthenticationState()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        _isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (_isAuthenticated)
        {
            _isAdmin = authState.User.IsInRole("Admin");
            var name = authState.User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value ?? "";
            _userInitials = string.IsNullOrEmpty(name) ? "U" : string.Join("", name.Split(' ').Take(2).Select(n => n.Length > 0 ? n[0].ToString() : ""));
            await LoadNotifications();
        }
    }

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        SetupTheme();
    }

    private void SetupTheme()
    {
        if (_isDarkMode)
        {
            _currentTheme = new MudTheme
            {
                PaletteDark = new PaletteDark
                {
                    Primary = "#90CAF9",
                    Secondary = "#F48FB1",
                    AppbarBackground = "#1A1A27",
                    Background = "#121212",
                    Surface = "#1E1E1E",
                    DrawerBackground = "#1A1A27",
                    DrawerText = "rgba(255,255,255,0.87)",
                    TextPrimary = "rgba(255,255,255,0.87)"
                },
                LayoutProperties = new LayoutProperties
                {
                    DrawerWidthLeft = "240px",
                    DrawerMiniWidthLeft = "56px"
                }
            };
        }
        else
        {
            _currentTheme = new MudTheme
            {
                PaletteLight = new PaletteLight
                {
                    Primary = "#1E88E5",
                    Secondary = "#FF4081",
                    AppbarBackground = "#1E88E5",
                    Background = "#F5F5F5",
                    Surface = "#FFFFFF",
                    DrawerBackground = "#FFFFFF",
                    DrawerText = "rgba(0,0,0,0.87)",
                    TextPrimary = "rgba(0,0,0,0.87)"
                },
                LayoutProperties = new LayoutProperties
                {
                    DrawerWidthLeft = "240px",
                    DrawerMiniWidthLeft = "56px"
                }
            };
        }
    }

    private async Task LoadNotifications()
    {
        // Simulação de carregamento de notificações
        _notificationCount = 3;
    }

    private void OpenNotifications()
    {
        Navigation.NavigateTo("/notificacoes");
    }

    private async Task Logout()
    {
        // Lógica de logout
        Snackbar.Add("Logout realizado com sucesso", Severity.Success);
        Navigation.NavigateTo("/");
    }
}